format = "%Y %m"
)
y$datetime <- as.POSIXct(
paste(
y$year,
y$month),
format = "%Y %m"
)
as.POSIXct(
paste(
y$year,
y$month),
format = "%Y %m"
)
paste(
y$year,
y$month)
View(y)
as.POSIXlt(
paste0(
y$year,
y$month),
format = "%Y%m"
)
strftime(
paste0(
y$year,
y$month),
format = "%Y%m"
)
strftime(
x = paste0(y$year, y$month),
format = "%Y%m"
)
as.POSIXct(
x = paste0(y$year, y$month),
format = "%Y%m"
)
paste0(y$year, y$month)
as.POSIXct(
paste0(
as.character(y$year),
as.character(y$month)),
format = "%Y%m"
)
paste0(
as.character(y$year),
as.character(y$month))
ISOdatetime(y$year, y$month)
ISOdatetime(y$year, y$month, 0)
with(y, ISOdatetime(year, month))
with(y, as.POSIXct(paste0(year, "/", month), format = "%Y/%m")
)
as.Date(paste(y$year, y$month))
as.Date(paste0(y$year, y$month))
y$year
is.numeric(y$year)
is.character(paste0(y$year, y$month))
as.Date(paste0(y$year, -, y$month))
as.Date(paste0(y$year, "-", y$month))
as.POSIXct(y$month, format = "%m")
as.POSIXct(y$month, format = "%M")
as.POSIXct(y$month, format = "%m")
# Add datetime for spacetimefolds later
y$datetime <- with(
y,
make_date(year, month)
)
View(y)
with(
y,
ISOdate(year, month)
)
with(
y,
ISOdate(year, month, 1)
)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
envi.create("E:/climodr/vignette")
prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
csv_fin <- fin.csv(method = "monthly",
safe_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
pred = 4,
resp = c(7:23),
plot.corrplot = FALSE
)
autocorr(
method = "monthly",
pred = 5,
resp = c(8:24),
plot.corrplot = FALSE
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls"
#    "nnet",
#    "lm"
),
seed = 707,
p = 0.8,
folds = "all",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls"
"nnet",
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"nnet",
"lm"
),
seed = 707,
p = 0.8,
folds = "all",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
devtools::load_all()
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
#    "nnet",
#    "lm"
),
seed = 707,
p = 0.8,
folds = "all",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls"
#    "nnet",
#    "lm"
),
seed = 707,
p = 0.8,
folds = "all",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls"
#    "nnet",
#    "lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
devtools::load_all()
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
#    "rf",
#    "pls"
"nnet",
#    "lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
#    "rf",
#    "pls"
"nnet"
#    "lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
devtools::load_all()
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
#    "rf",
#    "pls"
"nnet"
#    "lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
devtools::load_all()
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
#    "rf",
#    "pls"
"nnet"
#    "lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
devtools::load_all()
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
#    "rf",
#    "pls"
#    "nnet"
"lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls"
"nnet"
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"nnet",
"lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
envi.create("E:/climodr/vignette")
# read in dem
b_dem <- terra::rast(file.path(envrmt$path_rfinal,
grep(pattern = "_dgm_",
list.files(envrmt$path_rfinal),
value = TRUE)
)
remove(b_dem)
# read in dem
dgm <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = "_dgm_",
list.files(envrmt$path_rfinal),
value = TRUE)
)
# read in all models
mod_list <- as.data.frame(list.files(path = envrmt$path_models, pattern = "_model.rds", recursive = TRUE))
View(mod_list)
colnames(mod_list)[1] <- "mod"
View(mod_list)
# read in all models
mod_list <- list.files(
path = envrmt$path_models,
pattern = "_model.rds",
recursive = TRUE
)
# read eval_df
eval_df <- readRDS(
file.path(
envrmt$path_statistics,
paste0(
mnote,
"_mod_eval_df.rds"
)
mnote = "vignette"
# read eval_df
eval_df <- readRDS(
file.path(
envrmt$path_statistics,
paste0(
mnote,
"_mod_eval_df.rds"
)
View(eval_df)
eval_df[, 1]
dates <- unique(eval_df[, 1])
mod_df <- eval_df[which(eval_df[, 1] == i) | which(min(eval_df$Nrmse)), ]
i = 1
mod_df <- eval_df[which(eval_df[, 1] == dates[1]) | which(min(eval_df$Nrmse)), ]
which(min(eval_df$Nrmse))
min(eval_df$Nrmse)
which(eval_df$Nrmse == min(eval_df$Nrmse))
which(eval_df[, 1] == dates[1]) |
which(eval_df$Nrmse == min(eval_df$Nrmse))
mod_df <- eval_df[which(eval_df[, 1] == dates[1]), ]
View(mod_df)
mod_df <- mod_df[which(mod_df$Nrmse == min(mod_df$Nrmse)), ]
View(mod_df)
mod_df <- mod_date[which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
mod_date <- eval_df[which(eval_df[, 1] == dates[1]), ]
mod_df <- mod_date[which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
View(mod_df)
mod_df[2] <- mod_date[which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
mod_df[2, ] <- mod_date[which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
View(mod_df)
for (i in 1:length(dates)){
mod_date <- eval_df[which(eval_df[, 1] == dates[i]), ]
if (i == 1){
mod_df <- mod_date[which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
} else {
mod_df[2, ] <- mod_date[which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
}
} # i loop
mod_df[2, ] <- mod_date[which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
View(mod_df)
# create a list with all raster images
tiff_list <- list.files(
path = envrmt$path_rfinal,
pattern = "_ind.tif",
recursive = TRUE
)
source("~/GitHub/climodr/R/Prediction.R")
remove(climpred())
remove(climpred
)
# create a list with all raster images
tiff_list <- list.files(
path = envrmt$path_rfinal,
pattern = "_ind.tif",
recursive = TRUE
)
View(mod_df)
# filter for best models
for (i in 1:length(dates)){
mod_date <- eval_df[which(eval_df[, 1] == dates[i]), ]
ifelse(
i == 1,
mod_df <- mod_date[
which(mod_date$Nrmse == min(mod_date$Nrmse)), ],
mod_df[i, ] <- mod_date[
which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
)
} # end i loop
View(mod_df)
mod_df[1, 1] <- "201707"
# create a list with all raster images
tiff_list <- list.files(
path = envrmt$path_rfinal,
pattern = "_ind.tif",
recursive = TRUE
)
# create a list with all raster images
tiff_list <- list.files(
path = envrmt$path_rfinal,
pattern = ".tif",
recursive = TRUE
)
# create a list with all raster images
tiff_list <- list.files(
path = envrmt$path_rfinal,
pattern = ".tif",
recursive = TRUE
)
# read dgm
dgm <- terra::rast(
grep(
pattern = "_dgm_",
tiff_list,
value = TRUE)
)
# read dgm
dgm <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = "_dgm_",
tiff_list,
value = TRUE)
)
# filter for best models
dates <- unique(eval_df[, 1])
dates <- "201707"
View(mod_df)
# read fitting raster
raster <- terra::rast(
file.path(
envrmt$path_wraster,
grep(
pattern = dates[i],
tiff_list,
value = TRUE
)
# read fitting raster
raster <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = dates[i],
tiff_list,
value = TRUE
)
terra::add(raster) <- dgm
View(mod_df)
