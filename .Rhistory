.libPaths
.libPaths()
install.packages(devtools)
install.packages("devtools")
devtools::use_package(c("mapview","raster","dplyr","tidyverse","RStoolbox","doParallel","corrplot","geodata",
"randomForest","caret","readr","ggplot2","CAST","rgdal","sf","lubridate",
"sp","stars","horizon","terra","ggplot2","rasterVis","grid","viridis","ggthemes",
"ggspatial","reshape2","plotly","cowplot","gridExtra","lattice","ggpubr","ggnewscale","corrplot"))
devtools::use_package("mapview")
library(devtools)
devtools::use_package(c("mapview","raster","dplyr","tidyverse","RStoolbox","doParallel","corrplot","geodata",
"randomForest","caret","readr","ggplot2","CAST","rgdal","sf","lubridate",
"sp","stars","horizon","terra","ggplot2","rasterVis","grid","viridis","ggthemes",
"ggspatial","reshape2","plotly","cowplot","gridExtra","lattice","ggpubr","ggnewscale","corrplot"))
usethis::use_package(c("mapview","raster","dplyr","tidyverse","RStoolbox","doParallel","corrplot","geodata",
"randomForest","caret","readr","ggplot2","CAST","rgdal","sf","lubridate",
"sp","stars","horizon","terra","ggplot2","rasterVis","grid","viridis","ggthemes",
"ggspatial","reshape2","plotly","cowplot","gridExtra","lattice","ggpubr","ggnewscale","corrplot"))
usethis::use_package("mapview","raster","dplyr","tidyverse","RStoolbox","doParallel","corrplot","geodata",
"randomForest","caret","readr","ggplot2","CAST","rgdal","sf","lubridate",
"sp","stars","horizon","terra","ggplot2","rasterVis","grid","viridis","ggthemes",
"ggspatial","reshape2","plotly","cowplot","gridExtra","lattice","ggpubr","ggnewscale","corrplot")
usethis::use_package("mapview")
usethis::use_dev_package("envimaR", type = "Imports", remote = "gitlab::envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "github::envima/envimaR")
usethis::use_package("envimaR", type = "Imports", remote = "github::envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remotes = "envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "https://github.com/envima/envimaR")
?person
usethis::use_dev_package("envimaR", type = "Imports", remote = "https://github.com/envima/envimaR")
devtools::install_github("envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "github::envima/envimaR@HEAD")
setwd("D:/Kluga/GitHub/climodr")
usethis::use_dev_package("envimaR", type = "Imports", remote = "github::envima/envimaR@HEAD")
# Now create/read root direcory, folder structure and load packages
# NOTE rootDIR MUST be defined in calling script
if (!exists("rootDIR")) {
cat("variable rootDIR is NOT defined\n 'D:/edu//bale_aws/bekar' is set by default")
rootDIR = "D:/edu//bale_aws/bekar"
}
tempdir()
devtools::load_all(".")
?hubs
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input", "C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
Input
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
warnings()
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
print("done")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
install.packages("dplyr")
install.packages("horizon")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
load.all()
library(devtools)
load.all()
devtools::load.all()
devtools::load_all()
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
devtools::load_all()
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
devtools::load_all()
hub("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
?hubs
tempdir()
?terra
?else
?if
library(terra)
x <- terra::rast("C:/Users/Alexander/Documents/Universität/HiWi/Daten/dem_idx.grd")
plot(x)
x
plot(x, 1)
for (i in 1:8){
terra::writeRaster(x[[i]], paste0("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/dem_idx_", i, ".tif"), overwrite = TRUE)
}
y <- terra::rast("C:/Users/Alexander/Documents/Universität/HiWi/Daten/spec_dec17.grd")
y
for (i in 1:22){
terra::writeRaster(y[[i]], paste0("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/spec_dec17_", i, ".tif"), overwrite = TRUE)
}
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
z <- y[[1]]
z
z <- crop(z, c(550000, 560000, 700000, 710000))
plot(z)
z
terra::writeRaster(z, "C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/res_area.tif"), overwrite = TRUE)
terra::writeRaster(z, "C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/res_area.tif", overwrite = TRUE)
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
tiff_stack <- df()
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
climodr:::crop.all()
climodr:::crop.all
climodr:::all_files_in_distribution
cropall:::all_files_in_distribution
crop.all:::all_files_in_distribution
climodr:::crop.all()
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
terra::ext(paste0(Input, "res_area.tif"))
paste0(Input, "res_area.tif")
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
if (safe_output == TRUE){
terra::writeRaster(tiff_stack, paste0(alt_env_root_folder, "tiff_stack.tif"), overwrite = TRUE)
#  write.csv(csv_list, paste0(alt_env_root_folder, "csv_list"), overwrite = TRUE)
}
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
plot(x)
usethis::use_build_ignore()
x
devtools::load_all()
?hubs
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
?crop.all
climodr::crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
x
plot(x)
x
plot(x[[1:31]])
terra::plot(x)
x <- c("a", "b", "c")
x[1]
x[[1]]
x[[2]]
x[2]
#clean environment
rm(list=ls())
#session restart
.rs.restartR()
#remove plots_tubeDB
dev.off()
# Type: script
# Name: 02-template_script.R
# Author: Seda Bekar
# Description: set necessary variables and calls setup
# Dependencies: 01-bale_setup.R
# Output: list of pathes
# Copyright: Seda Bekar
#------------------------------------------------------------------------------
# 0 - specific setup
#-----------------------------
require(envimaR)
# MANDANTORY: defining the root folder, DO NOT change this line:
rootDIR = "~/bale_aws"
# MANDANTORY: calling the setup script also DO NOT change this line:
source(file.path(envimaR::alternativeEnvi(root_folder = rootDIR),"01-src/01-bale_setup.R"),echo = TRUE)
# MANDANTORY: defining the root folder, DO NOT change this line:
rootDIR = "C:/Users/Alexander/Documents/GitHub/bale_aws/bale_aws"
# MANDANTORY: calling the setup script also DO NOT change this line:
source(file.path(envimaR::alternativeEnvi(root_folder = rootDIR),"01-src/01-bale_setup.R"),echo = TRUE)
# MANDANTORY: defining the root folder, DO NOT change this line:
rootDIR = "C:/Users/Alexander/Documents/GitHub/bale_aws/bekar"
# MANDANTORY: calling the setup script also DO NOT change this line:
source(file.path(envimaR::alternativeEnvi(root_folder = rootDIR),"01-src/01-bale_setup.R"),echo = TRUE)
plots_tubeDB <- read.csv(file.path(envrmt$path_data, "plots_tubeDB.csv"))
str(plots_tubeDB)
summary(plots_tubeDB)
## First, we check if the temperature (Ta_200) has any NA values in the whole dataset:
sum(is.na(plots_tubeDB$Ta_200)) # number of NAs
which(is.na(plots_tubeDB$Ta_200))            # affected columns (use maxprint if the entries are omitted)
plots_tubeDB$datetime[which(is.na(plots_tubeDB$Ta_200))]      # specific dates of the lines with NA-values (again, maxprint if necessary)
plots_tubeDB$plot[which(is.na(plots_tubeDB$Ta_200))]          # number of affected climate stations
devtools::load_all()
### Initiate Climodr ###
climodr::hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
climodr::envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
climodr::crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
x
terra::plot(x)
x
