?envi.create
roxygen2::roxygenise()
roxygen2::roxygenise()
list.files
list.files(envrmt$path_dep)
envrmt$path_dep
climodr::envi.create("E:/climodr/vignette")
list.files(envrmt$path_dep)
x <- read.csv(list.files(envrmt$path_dep)[1])
x <- read.csv(list.files(envrmt$path_dep, full.names = TRUE)[1])
View(x)
x <- read.csv(list.files(envrmt$path_dep, full.names = TRUE)[1], row.names = 1)
View(x)
envrmt$path_dep
list.files(envrmt$path_dep)
x <- terra::rast(list.files(envrmt$path_dep, full.names = TRUE)[2])
x
list.files(envrmt$path_vector)
x <- terra::vect(list.files(envrmt$path_vector, full.names = TRUE)[1])
x
list.files(envrmt$path_raster)
x <- terra::rast(list.files(envrmt$path_raster, full.names = TRUE)[1])
x
names(x)
unquote(names(x))
noquote(names(x))
min(x)
max(x)
x <- terra::rast(list.files(envrmt$path_raster, full.names = TRUE)[2])
x
list.files(envrmt$path_tabular)
x <- read.csv(list.files(envrmt$path_tabular, full.names = T)[1])
x
header(x)
head(x)
roxygen2::roxygenise()
roxygen2::roxygenise()
remotes::install_github("eddelbuettel/dang")
remotes::install_github("eddelbuettel/dang")
gitcreds::gitcreds_set()
remotes::install_github("eddelbuettel/dang")
dang::checkPackageAsciiCode(dir = "C:/Users/Alexander/Documents/GitHub/climodr")
.check_package_ASCII_code
list.files("C:/Users/Alexander/Documents/GitHub/climodr")
list.files("C:/Users/Alexander/Documents/GitHub/climodr", recursive = TRUE, full.names = T)
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr", recursive = TRUE, full.names = T)){
dang::checkPackageAsciiCode(i)
}
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr",
recursive = TRUE,
full.names = T)) try({
dang::checkPackageAsciiCode(i)
})
dang::checkPackageAsciiCode("C:/Users/Alexander/Documents/GitHub/climodr/R")
x <- dang::checkPackageAsciiCode(dir = i)
View(x)
remove(x)
x <- dang::checkPackageAsciiCode(dir = i)
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr",
recursive = TRUE,
full.names = T)) try({
x <- dang::checkPackageAsciiCode(dir = i)
})
x <- dang::checkPackageAsciiCode(dir = "C:\Users\Alexander\Documents\GitHub\climodr\R")
x <- dang::checkPackageAsciiCode(dir = "C:/Users/Alexander/Documents/GitHub/climodr/R")
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr",
recursive = FALSE,
full.names = T)) try({
x <- dang::checkPackageAsciiCode(dir = "C:/Users/Alexander/Documents/GitHub/climodr/R")
})
a <- list.files("C:/Users/Alexander/Documents/GitHub/climodr", full.names = T)
a <- list.files("C:/Users/Alexander/Documents/GitHub/climodr", full.names = T)
i = 1
while (i < length(a)) try({
x <- dang::checkPackageAsciiCode(dir = a[i])
i = i + 1
})
a[1]
length(a)
i = i + 1
while (i < length(a)) try({
x <- dang::checkPackageAsciiCode(dir = a[i])
i = i + 1
})
i = i + 1
while (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
i = 1
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
ext_vignette
terra::unwrap(ext_vignette)
stringi::stri_enc_toascii(terra::unwrap(ext_vignette))
stringi::stri_enc_toascii(terra::crs(terra::unwrap(ext_vignette)))
a <- terra::unwrap(ext_vignette)
b <- stringi::stri_enc_toascii(terra::crs(a))
terra::crs(b)
terra::crs(a) <- terra::crs(b)
grepl("[^ -~]", terra::crs(a))
# Input vector folder
ext_vignette <- wrap(a)
library(usethis)
library(terra)
# Input vector folder
ext_vignette <- wrap(a)
usethis::use_data(ext_vignette, overwrite = TRUE)
rm(ext_vignette)
roxygen2::roxygenise()
?climodr::clim.sample
load("~/GitHub/climodr/data/ext_vignette.rda")
load("~/GitHub/climodr/data/res_area.rda")
?climodr::prep.csv
?climodr::proc.csv
?climodr::spat.csv
?climodr::crop.all
?climodr::calc.indices
?climodr::fin.csv
?climodr::autocorr
?climodr::calc.model
?climodr::climpred
?climodr::climplot
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
usethis::use_news_md()
usethis::use_cran_comments()
roxygen2::roxygenise()
usethis::use_release_issue()
devtools::build_readme()
usethis::use_readme_rmd()
vignette("climodr")
roxygen2::roxygenise()
vignette("climodr")
vignette(package = "climodr")
browseVignettes()
browseVignettes("climodr")
devtools::install(build_vignettes = TRUE)
devtools::install_github("envima/climodr", build_vignettes = TRUE)
devtools::build_readme()
devtools::install_github("envima/climodr", build_vignettes = TRUE)
detach("package:climodr", unload = TRUE)
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
usethis::use_github_links()
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
roxygen2::roxygenise()
devtools::check_win_devel()
usethis::use_version('major')
devtools::submit_cran()
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
roxygen2::roxygenise()
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif", recursive = TRUE)
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = TRUE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
?data
roxygen2::roxygenise()
#install climodr
install.packages("climodr")
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
library(magrittr)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif", recursive = TRUE)
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = TRUE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
roxygen2::roxygenise()
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
devtools::document()
devtools::document()
?data
?complete.cases
?head
?complete.cases
?daymonth
??daymonth
?data
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
#install climodr
install.packages("climodr")
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
print("Loading example data for the climodr example..")
print(environment())
# Input dep folder
data("res_area", envir = environment())
data("plot_description", envir = environment())
res_area <- terra::unwrap(res_area)
plot_description <- plot_description # to silence R CMD check note
terra::writeRaster(res_area, file.path(envrmt$path_dep, "res_area.tif"), overwrite = TRUE)
write.csv(plot_description, file.path(envrmt$path_dep, "plot_description.csv"))
print(paste0("Saved climodr example dependency files to {", envrmt$path_dep, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Input raster folder
data("sch_201707", envir = environment())
data("sch_dgm", envir = environment())
sch_201707 <- terra::unwrap(sch_201707)
sch_dgm <- terra::unwrap(sch_dgm)
terra::writeRaster(sch_201707, file.path(envrmt$path_raster, "sch_201707.tif"), overwrite = TRUE)
terra::writeRaster(sch_dgm, file.path(envrmt$path_raster, "sch_dgm.tif"), overwrite = TRUE)
print(paste0("Saved climodr example raster files to {", envrmt$path_raster, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Input tabular folder
l <- data(package = "climodr")$results[,3]
l <- l[grepl("Station", l)]
for (i in l){
eval(call("data", i, envir = environment()))
eval(call("write.csv", as.name(i), file.path(envrmt$path_tabular, paste0(i, ".csv")), row.names = FALSE))
}
print(paste0("Saved climodr example tabular files to {", envrmt$path_tabular, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Input vector folder
data("ext_vignette", envir = environment())
ext_vignette <- terra::unwrap(ext_vignette)
terra::writeVector(ext_vignette, file.path(envrmt$path_vector, "ext_vignette.gpkg"), overwrite = TRUE)
print(paste0("Saved climodr example vector files to {", envrmt$path_vector, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Talk to the User
print("Done loading all the example files. You are ready to continue.")
(envrmt = envrmt
)
roxygen2::roxygenise()
devtools::load_all()
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
# load in all the climodr example data for this vignette
clim.sample(envrmt)
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
roxygen2::roxygenise()
usethis::use_cran_comments()
