}
data_o[time_column] <- lubridate::floor_date(data_o[, time_column], aggregation_interval)
data_agg <- aggregate_sensor(data = data_o,
sensors = sensors,
station_ids = station_ids,
min_entries = 1,
coords = c("X", "Y"))
} else {
data_agg <- data_o
}
data_o <- readClimateData(all_stations, x,
station_ids = station_ids,
metadata = metadata,
sep = sep, dec = dec)
x = all_stations
folder = x
station_ids = station_ids
metadata = metadata
# Scan input folder for climate stations
formats <- sub(".*[.]", "", x)
formats <- formats[which(formats %in% c("csv", "txt", "gpkg", "shp"))]
# warn the user if scanning finds more then one file type.
if(length(unique(formats)) > 1){
warning("More then one filetype detected while scanning for climate station data. Climate station files of different types might be arranged differently and cause errors.")
}
for (i in 1:length(x)){
if(folder == envrmt$path_tabular){
if(formats[i] == "csv"){
data <- utils::read.csv(file.path(folder, x[i]), sep = sep, dec = dec)
}
if(formats[i] == "txt"){
data <- utils::read.table(file.path(folder, x[i]), sep = sep, dec = dec, header = TRUE)
}
} # end tabular input
if(folder == envrmt$path_vector){
data <- terra::vect(file.path(folder, x[i]))
crs <- terra::crs(data)
data <- terra::as.data.frame(data, geom = "XY")
} # end vector input
# merge all climate stations to one data frame
ifelse(i == 1,
stations <- data,
stations <- rbind(stations, data))
}
roxygen2::roxygenise()
# create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# load example data
clim.sample(envrmt = envrmt)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month")
roxygen2::roxygenise()
# create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# load example data
clim.sample(envrmt = envrmt)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month")
# Scan input folder for climate stations
formats <- sub(".*[.]", "", station_list)
# start reading climate stations
if(!is.data.frame(x) & x != envrmt$path_tabular & x != envrmt$path_vector){
stop("Something is wrong with x. Make sure it is either a data frame with climate station data or a input destination of the climodr environment made with envi.create().")
}
# either take data frame
if(x != envrmt$path_tabular & x != envrmt$path_vector){
data_o <- x
# or read all possible climate stations from folders
} else {
all_stations <- list.files(x, pattern = pattern)
data_o <- readClimateData(station_list = all_stations,
folder = x,
station_ids = station_ids,
metadata = metadata,
sep = sep, dec = dec)
if(is.list(data_o)){
metadata <- data_o$metadata
data_o <- data_o$stations
}
}
x = envrmt$path_tabular
# either take data frame
if(x != envrmt$path_tabular & x != envrmt$path_vector){
data_o <- x
# or read all possible climate stations from folders
} else {
all_stations <- list.files(x, pattern = pattern)
data_o <- readClimateData(station_list = all_stations,
folder = x,
station_ids = station_ids,
metadata = metadata,
sep = sep, dec = dec)
if(is.list(data_o)){
metadata <- data_o$metadata
data_o <- data_o$stations
}
}
all_stations <- list.files(x, pattern = pattern)
data_o <- readClimateData(station_list = all_stations,
folder = x,
station_ids = station_ids,
metadata = metadata,
sep = sep, dec = dec)
station_list = all_stations
folder = x
# Scan input folder for climate stations
formats <- sub(".*[.]", "", station_list)
formats <- formats[which(formats %in% c("csv", "txt", "gpkg", "shp"))]
# warn the user if scanning finds more then one file type.
if(length(unique(formats)) > 1){
warning("More then one filetype detected while scanning for climate station data. Climate station files of different types might be arranged differently and cause errors.")
}
for (i in 1:length(station_list)){
if(folder == envrmt$path_tabular){
if(formats[i] == "csv"){
data <- utils::read.csv(file.path(folder, station_list[i]), sep = sep, dec = dec)
}
if(formats[i] == "txt"){
data <- utils::read.table(file.path(folder, station_list[i]), sep = sep, dec = dec, header = TRUE)
}
} # end tabular input
if(folder == envrmt$path_vector){
data <- terra::vect(file.path(folder, station_list[i]))
crs <- terra::crs(data)
data <- terra::as.data.frame(data, geom = "XY")
} # end vector input
# merge all climate stations to one data frame
ifelse(i == 1,
stations <- data,
stations <- rbind(stations, data))
}
# add coordinates, if not existing already
if(!is.null(metadata)){
m_data <- utils::read.table(file.path(envrmt$path_dep, metadata[1]), sep = sep, dec = dec, header = TRUE, row.names = 1)
stations$X <- ""
stations$Y <- ""
unique_stations <- as.vector(unlist(unique(stations[station_ids])))
for (j in 1:length(unique_stations)){
stations$X[which(stations[station_ids] == unique_stations[j])] <-
m_data[which(unique_stations[j] == m_data[metadata[2]]), metadata[3]]
stations$Y[which(stations[station_ids] == unique_stations[j])] <-
m_data[which(unique_stations[j] == m_data[metadata[2]]), metadata[4]]
}
} else {
if(folder == envrmt$path_vector){
metadata <- c("Vectorfile", station_ids, "X", "Y", crs)
stations <- list(stations, metadata)
names(stations) <- c("stations", "metadata")
}
}
stations$X <- as.numeric(stations$X)
stations$X
View(stations)
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84")
# add coordinates, if not existing already
if(!is.null(metadata)){
m_data <- utils::read.table(file.path(envrmt$path_dep, metadata[1]), sep = sep, dec = dec, header = TRUE, row.names = 1)
stations$X <- ""
stations$Y <- ""
unique_stations <- as.vector(unlist(unique(stations[station_ids])))
for (j in 1:length(unique_stations)){
stations$X[which(stations[station_ids] == unique_stations[j])] <-
m_data[which(unique_stations[j] == m_data[metadata[2]]), metadata[3]]
stations$Y[which(stations[station_ids] == unique_stations[j])] <-
m_data[which(unique_stations[j] == m_data[metadata[2]]), metadata[4]]
}
} else {
if(folder == envrmt$path_vector){
metadata <- c("Vectorfile", station_ids, "X", "Y", crs)
stations <- list(stations, metadata)
names(stations) <- c("stations", "metadata")
}
}
View(stations)
stations$X <- as.numeric(stations$X)
stations$Y <- as.numeric(stations$Y)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month")
data_o <- stations
remove(stations)
if(is.list(data_o)){
metadata <- data_o$metadata
data_o <- data_o$stations
}
data_o <- readClimateData(station_list = all_stations,
folder = x,
station_ids = station_ids,
metadata = metadata,
sep = sep, dec = dec)
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84")
data_o <- readClimateData(station_list = all_stations,
folder = x,
station_ids = station_ids,
metadata = metadata,
sep = sep, dec = dec)
is.list(data_o)
is.data.frame(data_o)
is.data.frame(list(data_o, metadata))
is.list(list(data_o, metadata))
all_stations <- list.files(x, pattern = pattern)
data_o <- readClimateData(station_list = all_stations,
folder = x,
station_ids = station_ids,
metadata = metadata,
sep = sep, dec = dec)
if(!is.data.frame(data_o)){
metadata <- data_o$metadata
data_o <- data_o$stations
}
# time step aggregation of climate data
data_o[time_column] <- as.POSIXct(as.vector(unlist(data_o[time_column])), format = time_format)
# subset for start and end
if(!is.null(start) & !is.null(end)){
time_lim <- as.POSIXct(c(start, end), format = time_format)
data_o <- subset(data_o, time_lim[1] <= data_o[, time_column] & data_o[, time_column] <= time_lim[2])
} else {
if(!is.null(start) & is.null(end)){
time_lim <- as.POSIXct(start, format = time_format)
data_o <- subset(data_o, time_lim <= data_o[, time_column])
}
if(is.null(start) & !is.null(end)){
time_lim <- as.POSIXct(end, format = time_format)
data_o <- subset(data_o, data_o[, time_column] <= time_lim)
}
} # end subset for start and end
if(!is.null(aggregation_interval)){
if(!aggregation_interval %in% c("second", "minute", "hour", "day", "week", "month", "bimonth", "quarter", "season", "halfyear", "year")){
stop("Invalid aggregation interval. Check unit argument in [lubridate::floor_date()] to see valid inputs.")
}
data_o[time_column] <- lubridate::floor_date(data_o[, time_column], aggregation_interval)
data_agg <- aggregate_sensor(data = data_o,
sensors = sensors,
station_ids = station_ids,
min_entries = 1,
coords = c("X", "Y"))
} else {
data_agg <- data_o
}
points <- terra::vect(data_agg,
geom = c("X", "Y"),
crs = metadata[5])
if(is.null(crs)){
crs <- terra::crs(terra::rast(file.path(envrmt$path_dep, "res_area.tif")))
}
points <- terra:project(data_agg, crs)
points <- terra::project(data_agg, crs)
points <- terra::project(points, crs)
data_proj <- terra::as.data.frame(points, geom = "XY")
View(data_proj)
# save and return
data_fin <- splitTime(data_proj,
time_column = time_column,
smallest_interval = aggregation_interval)
View(data_fin)
smallest_interval = aggregation_interval
data <- data_proj
# identify time column
tc <- which(names(data) == time_column)
# manual entry of time columns
if(smallest_interval == "year"){
cols <- "year"
}
if(smallest_interval %in% c("halfyear", "season", "quarter", "bimonth", "month")){
cols <- c("year", "month")
}
# format vector fitting to i
formats <- c("%Y", "%m", "%d", "%H", "%M", "%S")
times <- as.data.frame(matrix(nrow = nrow(data), ncol = length(cols)))
View(times)
names(times) <- cols
# loop for date splitting
for(i in 1:length(cols)){
times[,i] <- as.character(format(data[, time_column], format = formats[i]))
}
View(times)
# merge everything together
data_split <- cbind(data[, 1:tc], times, data[(tc+1):ncol(data)])
data_fin <- data_split
remove("data_split", "data", "times", tc)
# create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# load example data
clim.sample(envrmt = envrmt)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month")
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month",
save_output = TRUE)
roxygen2::roxygenise()
# create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# load example data
clim.sample(envrmt = envrmt)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month",
save_output = TRUE)
# create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# load example data
clim.sample(envrmt = envrmt)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month",
save_output = TRUE)
View(climdata)
# create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# load example data
clim.sample(envrmt = envrmt)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "month",
save_output = TRUE)
View(climdata)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "day",
save_output = TRUE)
View(climdata)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "day",
start = "2017-07-01T00"
end = "2017-07-31T23"
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "day",
start = "2017-07-01T00",
end = "2017-07-31T23",
save_output = TRUE)
View(climdata)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "day",
start = "2017-07-01T01",
end = "2017-07-31T23",
save_output = TRUE)
View(climdata)
# prepare climate station data
climdata <- prepClimateStations(envrmt = envrmt,
x = envrmt$path_tabular,
pattern = "Station",
metadata = c("plot_description.csv",
"plot",
"lon",
"lat",
"+proj=longlat +datum=WGS84"),
time_column = "datetime",
time_format = "%Y-%m-%dT%H",
station_ids = "plotID",
sensors = "Ta_200",
aggregation_interval = "day",
start = "2017-07-02T01",
end = "2017-07-31T23",
save_output = TRUE)
View(envrmt)
View(climdata)
as.POSIXct("2017-07-02T01", format = ""%Y-%m-%dT%H"")
as.POSIXct("2017-07-02T01", format = "%Y-%m-%dT%H")
View(climdata)
