for (i in 1:number_of_stations){
data$lat[which(data$plot == names_of_stations[i])] <- des$lat[which(grepl(names_of_stations[i], des$plot))]
data$lon[which(data$plot == names_of_stations[i])] <- des$lon[which(grepl(names_of_stations[i], des$plot))]
};
daily_means <- 5:length(cn_data);
for (i in daily_means){
data[i] <- round(data[i], digits = 3)
};
View(data)
names(data)  <- c(names(data[1:3]),
gsub("daily_mean_", "", names(data[daily_means])),
names(data[(4 + length(daily_means)):length(names(data))])
);
View(data)
coord.sys <- terra::crs("EPSG:25832")
crs = coord.sys
devtools::load_all()
# make csv data spatial
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
crs = coord.sys,
safe_output = TRUE)
if (method == "monthly"){
daily_means <- 5:length(cn_data);
for (i in daily_means){
data[i] <- round(data[i], digits = 3)
};
names(data)  <- c(names(data[1:3]),
gsub("daily_mean_", "", names(data[daily_means])),
names(data[(4 + length(daily_means)):length(names(data))])
);
if (is.null(crs)){
crs <- terra::crs(terra::rast(file.path(envrmt$path_dep, "res_area.tif")))
}
data$lat <- as.numeric(data$lat)
data$lon <- as.numeric(data$lon)
sp::coordinates(data) <- ~ lon + lat
sp::proj4string(data) <- sp::CRS("+proj=longlat +datum=WGS84")
data <- sp::spTransform(data, crs)
n <- names(data)
data <- data.frame(data)
data$optional <- NULL
data <- data[, c(n, "lat", "lon")]
write.csv(data, file.path(envrmt$path_tworkflow, "spat_daily_means.csv"), row.names = FALSE);
return(data)
};
method = "monthly"
if (method == "monthly"){
daily_means <- 5:length(cn_data);
for (i in daily_means){
data[i] <- round(data[i], digits = 3)
};
names(data)  <- c(names(data[1:3]),
gsub("daily_mean_", "", names(data[daily_means])),
names(data[(4 + length(daily_means)):length(names(data))])
);
if (is.null(crs)){
crs <- terra::crs(terra::rast(file.path(envrmt$path_dep, "res_area.tif")))
}
data$lat <- as.numeric(data$lat)
data$lon <- as.numeric(data$lon)
sp::coordinates(data) <- ~ lon + lat
sp::proj4string(data) <- sp::CRS("+proj=longlat +datum=WGS84")
data <- sp::spTransform(data, crs)
n <- names(data)
data <- data.frame(data)
data$optional <- NULL
data <- data[, c(n, "lat", "lon")]
write.csv(data, file.path(envrmt$path_tworkflow, "spat_daily_means.csv"), row.names = FALSE);
return(data)
};
data <- read.csv(file.path(envrmt$path_tworkflow, "all_daily_means.csv"));
cn_data <- colnames(data)
devtools::load_all()
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
### Initiate climodr ###
climodr::envi.create("E:/climodr/exploratories")
### Initiate climodr ###
climodr::envi.create("E:/climodr/exploratories")
if (method == "monthly"){
data <- read.csv(file.path(envrmt$path_tworkflow, "all_daily_means.csv"));
cn_data <- colnames(data)
names_of_stations <- as.vector(unlist(unique(data[1])))
number_of_stations <- length(names_of_stations)
}
method = "monthly"
if (method == "monthly"){
data <- read.csv(file.path(envrmt$path_tworkflow, "all_daily_means.csv"));
cn_data <- colnames(data)
names_of_stations <- as.vector(unlist(unique(data[1])))
number_of_stations <- length(names_of_stations)
}
View(data)
des <- read.csv(file.path(envrmt$path_dep, des_file));
coord.sys <- terra::crs("EPSG:25832")
des_file = "plot_description.csv"
crs = coord.sys
des <- read.csv(file.path(envrmt$path_dep, des_file));
data$lat <- "";
data$lon <- "";
View(data)
for (i in 1:number_of_stations){
data$lat[which(data$plot == names_of_stations[i])] <- des$lat[which(grepl(names_of_stations[i], des$plot))]
data$lon[which(data$plot == names_of_stations[i])] <- des$lon[which(grepl(names_of_stations[i], des$plot))]
}; # end coordinate loop
View(data)
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file), sep = ",");
des <- read.csv(file.path(envrmt$path_dep, des_file), header = TRUE);
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file));
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file));
des <- read.csv(file.path(envrmt$path_dep, des_file), sep = ",");
des <- read.csv(file.path(envrmt$path_dep, des_file), sep = ',"');
View(des)
?read.csv
des <- read.csv(file.path(envrmt$path_dep, des_file), row.names = FALSE);
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file), header = TRUE);
des <- read.csv(file.path(envrmt$path_dep, des_file), row.names = TRUE);
des <- read.csv(file.path(envrmt$path_dep, des_file), row.names = 1);
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file), header = TRUE, row.names = 1);
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file));
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file), sep = "...");
des <- read.csv(file.path(envrmt$path_dep, des_file));
View(des)
des <- read.csv(file.path(envrmt$path_dep, des_file));
library(rTubeDB)
library(dplyr)
tubedb <- rTubeDB::TubeDB(url = "http://137.248.186.133:61036",
user = "alexander.klug",
password = "p4ybtxO4")
regionDF <- rTubeDB::query_regions(tubedb)
plotDF <- rTubeDB::query_region_plots(tubedb, "BE")
sensorDF <- rTubeDB::query_region_sensors(tubedb, "BE")
# creating meta data
plotDF.hainich <- plotDF %>% filter(plotDF$general_station %in% c("HEF", "HEG", "HEW"))
plotDF.hainich <- plotDF.hainich[1:103, -c(4)]
names(plotDF.hainich) <- c("plot", "general_station", "logger_type", "lat", "lon", "elevation")
write.csv(plotDF.hainich,
file.path(envrmt$path_dep, "plot_description.csv"),
row.names = FALSE,
quotes = FALSE)
write.table(plotDF.hainich,
file.path(envrmt$path_dep, "plot_description.csv"),
sep = ",",
row.names = FALSE,
quotes = FALSE)
write.csv(plotDF.hainich,
file.path(envrmt$path_dep, "plot_description.csv"),
#          sep = ",",
row.names = FALSE,
quote = FALSE)
### Initiate climodr ###
climodr::envi.create("E:/climodr/exploratories")
method = "monthly"
des_file = "plot_description.csv"
crs = coord.sys
coord.sys <- terra::crs("EPSG:25832")
crs = coord.sys
data <- read.csv(file.path(envrmt$path_tworkflow, "all_daily_means.csv"));
cn_data <- colnames(data)
names_of_stations <- as.vector(unlist(unique(data[1])))
number_of_stations <- length(names_of_stations)
des <- read.csv(file.path(envrmt$path_dep, des_file));
View(des)
data$lat <- "";
data$lon <- "";
for (i in 1:number_of_stations){
data$lat[which(data$plot == names_of_stations[i])] <- des$lat[which(grepl(names_of_stations[i], des$plot))]
data$lon[which(data$plot == names_of_stations[i])] <- des$lon[which(grepl(names_of_stations[i], des$plot))]
}; # end coordinate loop
View(des)
remove(data, des, cn_data, crs, des_file)
remove(method, names_of_stations, number_of_stations)
remove(i)
# make csv data spatial
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
crs = coord.sys,
safe_output = TRUE)
head(csv_spat)
devtools::load_all()
# make csv data spatial
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
crs = coord.sys,
safe_output = TRUE)
head(csv_spat)
devtools::load_all()
# finalize csv data
csv_fin <- climodr::fin.csv(method = "monthly",
crs = coord.sys,
safe_output = TRUE)
head(csv_fin)
View(csv_fin)
eval_vector <- c(5, 6, 9:47)
climodr::autocorr(eval_vector, plot.corrplot = FALSE)
devtools::load_all()
climodr::autocorr(eval_vector, plot.corrplot = FALSE)
data_o <- read.csv(file.path(envrmt$path_tfinal, "final_daily.csv"));
df_total <- data.frame();
data_y <- data_o[c(which(data_o$year == y)), ]
data_m <- data_y[c(which(data_y$month == m)), ]
print(paste0("Training monthly models for ", y,".  ", m, "/", length(months)))
y = 2020
m = 1
data_m <- data_y[c(which(data_y$month == m)), ]
data_y <- data_o[c(which(data_o$year == y)), ]
data_y <- data_y[complete.cases(data_y), ]
months <- unique(data_y$month)
data_m <- data_y[c(which(data_y$month == m)), ]
print(paste0("Training monthly models for ", y,".  ", m, "/", length(months)))
timespan = c(2020)
climresp = c(5,6)
classifier = c("rf", "pls","nnet" ,"lm")
seed = 707
p = 0.8
fold = "LLO",
fold = "LLO"
mnote = "normal"
predrows = c(9:47)
tc_method = "cv"
metric = "RMSE"
autocorrelation = TRUE
s = climresp[1]
set.seed(seed)
if(autocorrelation == "TRUE"){
data <- data_m[complete.cases(data_m), ]
if (s == climresp[1]){
delect <- read.csv(file.path(envrmt$path_statistics, "tem_delect.csv"))
}
if (s == climresp[2]){
delect <- read.csv(file.path(envrmt$path_statistics, "reh_delect.csv"))
}
if (s == climresp[3]) try ({
delect <- read.csv(file.path(envrmt$path_statistics, "pre_delect.csv"))
})
if (s == climresp[4]) try ({
delect <- read.csv(file.path(envrmt$path_statistics, "sun_delect.csv"))
})
if (!(length(delect$variables) == 0)){
data <- data %>% dplyr::select(-c(delect$variables))
}
if(autocorrelation == "TRUE"){
data <- data_m[complete.cases(data_m), ]
if (s == climresp[1]){
delect <- read.csv(file.path(envrmt$path_statistics, "tem_delect.csv"))
}
if (s == climresp[2]){
delect <- read.csv(file.path(envrmt$path_statistics, "reh_delect.csv"))
}
#          if (s == climresp[3]) try ({
#            delect <- read.csv(file.path(envrmt$path_statistics, "pre_delect.csv"))
#          })
#          if (s == climresp[4]) try ({
#            delect <- read.csv(file.path(envrmt$path_statistics, "sun_delect.csv"))
#          })
if (!(length(delect$variables) == 0)){
data <- data %>% dplyr::select(-c(delect$variables))
}
partition_indexes <- caret::createDataPartition(data$plot,
times = 1,
p = p,
list = FALSE)
trainingDat <- data[partition_indexes, ]
testingDat <- data[-partition_indexes, ]
set.seed(seed)
if (fold == "LLO"){
folds <- CAST::CreateSpacetimeFolds(trainingDat, spacevar = "plot", k = 3) #set k to the number of unique spatial or temporal units. (k = 3)
}
if (fold == "LTO"){
folds <- CAST::CreateSpacetimeFolds(trainingDat, timevar = "datetime") #set k to the number of unique spatial or temporal units. (k = 12)
}
if (fold == "LLTO"){
folds <- CAST::CreateSpacetimeFolds(trainingDat, timevar= "datetime", spacevar = "plot")
}
ctrl <- caret::trainControl(method = "cv",
index = folds$index,
savePredictions = TRUE
)
if (autocorrelation == TRUE){
preds <- trainingDat[ ,head(predrows, -length(delect$variables))]
} else {
preds <- trainingDat[ ,predrows]
} # end autocorrelation-loop
resps <- trainingDat[ ,s]
if (s == climresp[1]){sensor <- "tem"}
if (s == climresp[2]){sensor <- "reh"}
#        if (s == climresp[3]){sensor <- "sun"}
#        if (s == climresp[4]){sensor <- "pre"}
print(paste0(colnames(trainingDat[s]), " -> ", sensor))
save(trainingDat, file = file.path(envrmt$path_tfinal, paste0(time, month, "_", mnote, "_", sensor, "_", "trainingDat.RData")))
save(testingDat, file = file.path(envrmt$path_tfinal, paste0(time, month, "_", mnote, "_", sensor, "_", "testingDat.RData")))
i = 1
method = classifier[i]
print(paste0("method = ", method))
tuneGrid <- NULL
if (method == "gbm"){
tuneLength <- 10
modclass <-"gbm"
}
if (method == "lm"){
tuneLength <- 10
modclass <- "lim"
}
if (method == "rf"){
tuneLength <- 1
tuneGrid <- expand.grid(mtry = 2)
modclass <- "raf"
}
if (method == "pls"){
preds <- data.frame(scale(preds))
tuneLength <- 10
modclass <- "pls"
}
if (method == "nnet"){
tuneLength <- 1
preds <- data.frame(scale(preds))
tuneGrid <- expand.grid(size = seq(2,ncol(preds),2),
decay = seq(0,0.1,0.025)
)
modclass <- "nnt"
}
ffsmodel <- CAST::ffs(predictors = preds,
response = resps,
metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
linout = TRUE,
verbose = FALSE,
trace = FALSE
)
View(trainingDat)
ffsmodel
saveRDS(ffsmodel, file.path(envrmt$path_models, paste0(y, m, "_", fold, "_", mnote, "_", modclass, "_", sensor, "_ffs_model.rds")))
mod <- ffsmodel
accuracy <- min(mod$selectedvars_perf)
df <- data.frame(
year_month = time,
classifier = modclass,
accuracy = accuracy,
Nrmse = accuracy / (max(resps) - min(resps)),
Rsqrd = summary(mod)$r.squared,
sensor = sensor,
modeltype = fold,
note = mnote)
mod$results[3,1]
mod$results[1,3]
df <- data.frame(
year_month = time,
classifier = modclass,
accuracy = accuracy,
Nrmse = accuracy / (max(resps) - min(resps)),
Rsqrd = mod$results[1,3],
sensor = sensor,
modeltype = fold,
note = mnote)
df <- data.frame(
year_month = paste0(y,m)
classifier = modclass,
df <- data.frame(
year_month = paste0(y,m),
classifier = modclass,
accuracy = accuracy,
Nrmse = accuracy / (max(resps) - min(resps)),
Rsqrd = mod$results[1,3],
sensor = sensor,
modeltype = fold,
note = mnote)
#add the vars in list
if (method == "gbm"){
df$variables[1] = list(c(colnames(mod$ptype)))
} else {
df$variables[1] = list(c(mod$selectedvars))
}
View(df)
devtools::load_all()
### Initiate climodr ###
climodr::envi.create("E:/climodr/exploratories")
# Prediction
climodr::
mod <- readRDS(file.path(envrmt$path_models, "20201_LLO_normal_raf_tem_ffs_model.rds"))
tif <- terra::rast(file.path(envrmt$path_rfinal, "hai_202001_mean.tif"))
pred <- terra::predict(tif, mod, na.rm = T)
terra::plot(pred)
aoa <- CAST::aoa(tif, mod)
terra::plot(aoa, add = TRUE)
terra::plot(pred)
terra::plot(aoa, add = TRUE)
View(aoa)
terra::plot(pred)
terra::plot(aoa$AOA, add = TRUE)
terra::writeRaster(pred, file.path(envrmt$path_preds, "hai_202001_pred.tif"))
terra::writeRaster(aoa, file.path(envrmt$path_preds, "hai_202001_aoa.tif"))
terra::writeRaster(aoa$AOA, file.path(envrmt$path_preds, "hai_202001_aoa.tif"))
### Initiate climodr ###
climodr::envi.create("E:/climodr/exploratories")
terra::writeRaster(pred, file.path(envrmt$path_preds, "hai_202001_pred.tif"))
envrmt$path_preds
data_n <- terra::rast(file.path(envrmt$path_rworkflow, "hai_20200104_ind.tif"))
all_files <- list.files(path = file.path(envrmt$path_rfinal), recursive = T)
i = 1
data <- terra::rast(file.path(envrmt$path_rfinal, all_files[i]))
terra::nlyr(data)
terra::nlyr(data_n)
data[1]
data[[1]]
names(data_n)
data <- data[[names(data_n)]]
data_order <- names(terra::rast(file.path(envrmt$path_rworkflow, "hai_20200104_ind.tif")))
remove(data_n)
data$EVI <- NULL
data$EVI2 <- NULL
terra::nlyr(data)
for (i in 1:12){
data <- terra::rast(file.path(envrmt$path_rfinal, all_files[i]))
data <- data[[data_order]]
data$EVI <- NULL
data$EVI2 <- NULL
terra::writeRaster(data, file.path(envrmt$path_rfinal, all_files[i]))
}
for (i in 1:12){
data <- terra::rast(file.path(envrmt$path_rfinal, all_files[i]))
data <- data[[data_order]]
data$EVI <- NULL
data$EVI2 <- NULL
print(i)
terra::writeRaster(data, file.path(envrmt$path_rfinal, "new", all_files[i]))
}
devtools::load_all()
### Initiate climodr ###
climodr::envi.create("E:/climodr/exploratories")
# finalize csv data
csv_fin <- climodr::fin.csv(method = "monthly",
crs = coord.sys,
safe_output = TRUE)
View(csv_fin)
eval_vector <- c(5, 6, 9:47)
climodr::autocorr(eval_vector, plot.corrplot = FALSE)
# Modelling
climodr::calc.model(timespan = c(2020),
climresp = c(5,6),
classifier = c("rf"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(9:47),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE)
mod_tem <- readRDS(file.path(envrmt$path_models, "20201_LLO_normal_raf_tem_ffs_model.rds"))
mod_reh <- readRDS(file.path(envrmt$path_models, "20201_LLO_normal_raf_reh_ffs_model.rds"))
tif <- terra::rast(file.path(envrmt$path_rfinal, "hai_202001_mean.tif"))
pred_tem <- terra::predict(tif, mod_tem, na.rm = T)
pred_reh <- terra::predict(tif, mod_reh, na.rm = T)
terra::writeRaster(pred_tem, file.path(envrmt$path_preds, "hai_202001_tem_pred.tif"))
aoa_tem <- CAST::aoa(tif, mod_tem)
terra::writeRaster(aoa_tem$AOA, file.path(envrmt$path_preds, "hai_202001_tem_aoa.tif"))
aoa_reh <- CAST::aoa(tif, mod_reh)
CAST::aoa?
CAST::aoa
?CAST::aoa
pred_reh <- terra::predict(tif, mod_reh, na.rm = T)
mod_reh
terra::add(tif) <- dgm
dgm <- terra::rast(file.path(envrmt$path_rfinal, "hai_dgm.tif"))
terra::add(tif) <- dgm
tif
dgm
?terra
dgm <- terra::resample(dgm, tif)
terra::add(tif) <- dgm
terra::nlyr(tif)
terra::nlyr(dgm)
pred_reh <- terra::predict(tif, mod_reh, na.rm = T)
terra::writeRaster(pred_reh, file.path(envrmt$path_preds, "hai_202001_reh_pred.tif"))
aoa_reh <- CAST::aoa(tif, mod_reh)
terra::writeRaster(aoa_reh$AOA, file.path(envrmt$path_preds, "hai_202001_reh_aoa.tif"))
devtools::load_all()
devtools::load_all()
# in Lab II:
climodr::envi.create("F:/users/kluga/exploratories")
# in Lab II:
climodr::envi.create("F:/users/kluga/exploratories")
View(envrmt)
# in Lab II:
climodr::envi.create("F:/users/kluga/exploratories")
eval_vector <- c(5, 6, 9:47)
# Modelling
climodr::calc.model(timespan = c(2020),
climresp = c(5,6),
classifier = c("rf", "pls" ,"lm", "gbm"),
seed = 707,
p = 0.8,
folds = "all",
mnote = "f20run",
predrows = c(9:47),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
