usethis::use_package("mapview")
usethis::use_dev_package("envimaR", type = "Imports", remote = "gitlab::envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "github::envima/envimaR")
usethis::use_package("envimaR", type = "Imports", remote = "github::envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remotes = "envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "https://github.com/envima/envimaR")
?person
usethis::use_dev_package("envimaR", type = "Imports", remote = "https://github.com/envima/envimaR")
devtools::install_github("envima/envimaR")
usethis::use_dev_package("envimaR", type = "Imports", remote = "github::envima/envimaR@HEAD")
setwd("D:/Kluga/GitHub/climodr")
usethis::use_dev_package("envimaR", type = "Imports", remote = "github::envima/envimaR@HEAD")
# Now create/read root direcory, folder structure and load packages
# NOTE rootDIR MUST be defined in calling script
if (!exists("rootDIR")) {
cat("variable rootDIR is NOT defined\n 'D:/edu//bale_aws/bekar' is set by default")
rootDIR = "D:/edu//bale_aws/bekar"
}
tempdir()
devtools::load_all(".")
?hubs
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input", "C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
Input
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
warnings()
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
print("done")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
devtools::load_all(".")
install.packages("dplyr")
install.packages("horizon")
devtools::load_all(".")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test")
load.all()
library(devtools)
load.all()
devtools::load.all()
devtools::load_all()
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
devtools::load_all()
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
devtools::load_all()
hub("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
?hubs
tempdir()
?terra
?else
?if
library(terra)
x <- terra::rast("C:/Users/Alexander/Documents/Universität/HiWi/Daten/dem_idx.grd")
plot(x)
x
plot(x, 1)
for (i in 1:8){
terra::writeRaster(x[[i]], paste0("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/dem_idx_", i, ".tif"), overwrite = TRUE)
}
y <- terra::rast("C:/Users/Alexander/Documents/Universität/HiWi/Daten/spec_dec17.grd")
y
for (i in 1:22){
terra::writeRaster(y[[i]], paste0("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/spec_dec17_", i, ".tif"), overwrite = TRUE)
}
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
z <- y[[1]]
z
z <- crop(z, c(550000, 560000, 700000, 710000))
plot(z)
z
terra::writeRaster(z, "C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/res_area.tif"), overwrite = TRUE)
terra::writeRaster(z, "C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/res_area.tif", overwrite = TRUE)
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
tiff_stack <- df()
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
climodr:::crop.all()
climodr:::crop.all
climodr:::all_files_in_distribution
cropall:::all_files_in_distribution
crop.all:::all_files_in_distribution
climodr:::crop.all()
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data")
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
terra::ext(paste0(Input, "res_area.tif"))
paste0(Input, "res_area.tif")
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
if (safe_output == TRUE){
terra::writeRaster(tiff_stack, paste0(alt_env_root_folder, "tiff_stack.tif"), overwrite = TRUE)
#  write.csv(csv_list, paste0(alt_env_root_folder, "csv_list"), overwrite = TRUE)
}
crop.all(method = "Input", safe_output = TRUE)
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
devtools::load_all()
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
plot(x)
usethis::use_build_ignore()
x
devtools::load_all()
?hubs
### Initiate Climodr ###
hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
?crop.all
climodr::crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
x
plot(x)
x
plot(x[[1:31]])
terra::plot(x)
x <- c("a", "b", "c")
x[1]
x[[1]]
x[[2]]
x[2]
#clean environment
rm(list=ls())
#session restart
.rs.restartR()
#remove plots_tubeDB
dev.off()
# Type: script
# Name: 02-template_script.R
# Author: Seda Bekar
# Description: set necessary variables and calls setup
# Dependencies: 01-bale_setup.R
# Output: list of pathes
# Copyright: Seda Bekar
#------------------------------------------------------------------------------
# 0 - specific setup
#-----------------------------
require(envimaR)
# MANDANTORY: defining the root folder, DO NOT change this line:
rootDIR = "~/bale_aws"
# MANDANTORY: calling the setup script also DO NOT change this line:
source(file.path(envimaR::alternativeEnvi(root_folder = rootDIR),"01-src/01-bale_setup.R"),echo = TRUE)
# MANDANTORY: defining the root folder, DO NOT change this line:
rootDIR = "C:/Users/Alexander/Documents/GitHub/bale_aws/bale_aws"
# MANDANTORY: calling the setup script also DO NOT change this line:
source(file.path(envimaR::alternativeEnvi(root_folder = rootDIR),"01-src/01-bale_setup.R"),echo = TRUE)
# MANDANTORY: defining the root folder, DO NOT change this line:
rootDIR = "C:/Users/Alexander/Documents/GitHub/bale_aws/bekar"
# MANDANTORY: calling the setup script also DO NOT change this line:
source(file.path(envimaR::alternativeEnvi(root_folder = rootDIR),"01-src/01-bale_setup.R"),echo = TRUE)
plots_tubeDB <- read.csv(file.path(envrmt$path_data, "plots_tubeDB.csv"))
str(plots_tubeDB)
summary(plots_tubeDB)
## First, we check if the temperature (Ta_200) has any NA values in the whole dataset:
sum(is.na(plots_tubeDB$Ta_200)) # number of NAs
which(is.na(plots_tubeDB$Ta_200))            # affected columns (use maxprint if the entries are omitted)
plots_tubeDB$datetime[which(is.na(plots_tubeDB$Ta_200))]      # specific dates of the lines with NA-values (again, maxprint if necessary)
plots_tubeDB$plot[which(is.na(plots_tubeDB$Ta_200))]          # number of affected climate stations
devtools::load_all()
### Initiate Climodr ###
climodr::hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
climodr::envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
climodr::crop.all(method = "Input", safe_output = TRUE)
x <- terra::rast(paste0(Output, "tiff_stack.tif"))
x
terra::plot(x)
x
devtools::load_all()
source("~/GitHub/climodr/testing/Testing.R", echo=TRUE)
x <- climodr::crop.all(method = "Input", safe_output = TRUE)
x
### Initiate Climodr ###
climodr::hubs("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Universität/HiWi/Test/data/Output/")
climodr::envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
### Initiate Climodr ###
climodr::hubs("C:/Users/Alexander/Documents/Uni/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Uni/HiWi/Test/data/Output/")
climodr::envi.create("C:/Users/Alexander/Documents/Universität/HiWi/Test/data/")
climodr::envi.create("C:/Users/Alexander/Documents/Uni/HiWi/Test/data/")
x <- climodr::crop.all(method = "Input", safe_output = TRUE)
terra::plot(x[1,2])
terra::plot(x[1])
terra::plot(x[[1])
terra::plot(x[[1]])
terra::plot(x[[1:3]])
terra::plot(x[[1:4]])
unlink("vignettes/climodr-vignette_cache", recursive = TRUE)
climodr::check.csv(method = "proc", safe_output = TRUE)
csv_list <- list();
all_files_in_distribution <- list.files(path = Input, recursive = T); #reads all data in Input-Folder
csv_paths <- grep(".csv$", all_files_in_distribution, value=TRUE);
number_of_csvs <- length(csv_paths);
i = 1
csv_data <- read.csv(paste0(Input, csv_paths[[i]]))
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
csv_data$daymonth <- strftime(csv_data$cn_data[2], format = "%m-%d")
csv_data$cn_data[2]
csv_data$(cn_data[2])
csv_data$paste0(cn_data[2])
csv_data$datetime
csv_data[,2]
csv_data$daymonth <- strftime(csv_data[,2], format = "%m-%d")
csv_data$year<- strftime(csv_data[,2], format = "%y")
csv_data$month <- strftime(csv_data[,2], format = "%m")
csv_data$day <- strftime(csv_data[,2], format = "%d")
csv_data <- csv_data[, c(cn_data[1,2], "daymonth", "year", "month", "day", cn_data[3:number_of_cn])]
cn_data[1,2]
cn_data(1,2)
cn_data
cn_data[1]
cn_data[1;2]
cn_data[1:2]
csv_data <- csv_data[, c(cn_data[1:2], "daymonth", "year", "month", "day", cn_data[3:number_of_cn])]
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, paste0("m",cn_data[j]) = ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
cn_data[7]
paste0("m",cn_data[j])
paste0("m",cn_data[7])
csv_data <- transform(csv_data, paste0("m",cn_data[j]) <- ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, paste0("m",cn_data[j]) <- ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
csv_data <- transform(csv_data, cn_data(j) <- ifelse(is.na(cn_data[j]), paste0("m",cn_data[j]), cn_data[j]))
csv_data$paste0("m",cn_data[j]) <- NULL
}
View(x)
x <- NULL
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, paste0("m",cn_data[j]) <- ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
csv_data <- transform(csv_data, cn_data(j) <- ifelse(is.na(cn_data[j]), paste0("m",cn_data[j]), cn_data[j]))
csv_data$paste0("m",cn_data[j]) <- NULL
}
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, paste0("m",cn_data[j]) = ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
csv_data <- transform(csv_data, paste0("m",cn_data[j]) == ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
warnings()
View(csv_data)
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, paste0("m",cn_data[j]) == ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
csv_data <- transform(csv_data, cn_data(j) == ifelse(is.na(cn_data[j]), paste0("m",cn_data[j]), cn_data[j]))
csv_data$paste0("m",cn_data[j]) <- NULL
}
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, paste0("m",cn_data[j]) == ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
csv_data <- transform(csv_data, cn_data[j] == ifelse(is.na(cn_data[j]), paste0("m",cn_data[j]), cn_data[j]))
csv_data$paste0("m",cn_data[j]) <- NULL
}
?transform
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, paste0("m",cn_data[j]) == ave(cn_data[j], daymonth, FUN = function(y) mean (y, na.rm = TRUE)))
csv_data <- transform(csv_data, cn_data[j] == ifelse(is.na(cn_data[j]), paste0("m",cn_data[j]), cn_data[j]))
csv_data$paste0("m",cn_data[j]) <- NULL
}
warnings(1)
?ave
?mean
j <- 7
ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE))
ave(cn_data[j], csv_data[,3], FUN = function(x) mean (x, na.rm = TRUE))
ave(cn_data[j], csv_data[,3], FUN = function(y) mean (y, na.rm = TRUE))
ave(cn_data[j], csv_data[,3], FUN = function(x) mean (x))
function(x) mean (x, na.rm = TRUE)
FUN = function(x) mean (x, na.rm = TRUE)
View(FUN)
# Type: script
# Name: 02-template_script.R
# Author: Seda Bekar
# Description: set necessary variables and calls setup
# Dependencies: 01-bale_setup.R
# Output: list of pathes
# Copyright: Seda Bekar
#------------------------------------------------------------------------------
# 0 - specific setup
#-----------------------------
require(envimaR)
# MANDANTORY: defining the root folder, DO NOT change this line:
rootDIR = "C:/Users/Alexander/Documents/GitHub/bale_aws/bekar"
plots_tubeDB <- read.csv(file.path(envrmt$path_data, "plots_tubeDB.csv"))
# MANDANTORY: calling the setup script also DO NOT change this line:
source(file.path(envimaR::alternativeEnvi(root_folder = rootDIR),"01-src/01-bale_setup.R"),echo = TRUE)
plots_tubeDB <- read.csv(file.path(envrmt$path_data, "plots_tubeDB.csv"))
BALE001_tubeDB <- data.frame(plots_tubeDB[c(1:45235), ]) # adjust the number of BALE001 to your dataset
BALE001_tubeDB$daymonth <- strftime(BALE001_tubeDB$datetime, format = "%m-%d")
BALE001_tubeDB$year<- strftime(BALE001_tubeDB$datetime, format = "%y")
BALE001_tubeDB$month <- strftime(BALE001_tubeDB$datetime, format = "%m")
BALE001_tubeDB$day <- strftime(BALE001_tubeDB$datetime, format = "%d")
BALE001_tubeDB <- BALE001_tubeDB[, c("plot", "datetime", "daymonth", "year","month","day",
"Ta_200","Ta_200_min","Ta_200_max","rH_200","rH_200_min",
"rH_200_max","SWDR_200","P_RT_NRT")]
######### mta_200 #############
BALE001_tubeDB <- transform(BALE001_tubeDB, mta_200 = ave(Ta_200, daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
BALE001_tubeDB <- transform(BALE001_tubeDB, Ta_200 = ifelse(is.na(Ta_200), mta_200, Ta_200))
View(BALE001_tubeDB)
?transform
######### mta_200 #############
BALE001_tubeDB <- data.table::transform(BALE001_tubeDB, mta_200 = ave(Ta_200, daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
cn_data[j]
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
climodr::hubs("C:/Users/Alexander/Documents/Uni/HiWi/Test/data/Input/",
"C:/Users/Alexander/Documents/Uni/HiWi/Test/data/Output/")
climodr::envi.create("C:/Users/Alexander/Documents/Uni/HiWi/Test/data/")
tempdir()
csv_data <- read.csv(paste0(Input, csv_paths[[i]]))
all_files_in_distribution <- list.files(path = Input, recursive = T); #reads all data in Input-Folder
csv_paths <- grep(".csv$", all_files_in_distribution, value=TRUE);
number_of_csvs <- length(csv_paths);
i=1
j=7
csv_data <- read.csv(paste0(Input, csv_paths[[i]]))
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
csv_data$daymonth <- strftime(csv_data[,2], format = "%m-%d")
csv_data$year<- strftime(csv_data[,2], format = "%y")
csv_data$month <- strftime(csv_data[,2], format = "%m")
csv_data$day <- strftime(csv_data[,2], format = "%d")
csv_data <- csv_data[, c(cn_data[1:2], "daymonth", "year", "month", "day", cn_data[3:number_of_cn])]
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
csv_data <- transform(csv_data, paste0("m",cn_data[j]) == ave(cn_data[j], daymonth, FUN = function(x) mean (x, na.rm = TRUE)))
?warnings
warnings()
daymonth
cn_data[j]
daymonth
ave(cn_data[j], daymonth)
ave(cn_data[j], daymonth, FUN = function(x) mean
)
ave(cn_data[j], daymonth, FUN = function(x) mean(x))
ave(cn_data[j], csv_data$daymonth, FUN = function(x) mean(x))
ave(cn_data[j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE))
warnings
warnings()
csv_data <- transform(csv_data, paste0("m",cn_data[j]) == ave(cn_data[j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- transform(csv_data, cn_data[j] == ifelse(is.na(cn_data[j]), paste0("m",cn_data[j]), cn_data[j]))
View(csv_data)
csv_data <- transform(csv_data, paste0("m",cn_data[j]) = ave(cn_data[j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- base::transform(csv_data, paste0("m",cn_data[j]) = ave(cn_data[j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- transform(csv_data, temp_col = ave(cn_data[j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- transform(csv_data, temp_col = ave(csv_data[j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- transform(csv_data, temp_col = ave(csv_data[j], daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
warnings()
csv_data <- transform(csv_data, temp_col = ave(csv_data[j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data[j]
csv_data[,j]
csv_data$Ta_200
csv_data <- transform(csv_data, temp_col = ave(csv_data[,j], csv_data$daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- transform(csv_data, temp_col = ave(csv_data[,j], daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- transform(csv_data, csv_data[,j] = ifelse(is.na(csv_data[,j]), temp_col, csv_data[,j]))
csv_data[,j]
ifelse(is.na(csv_data[,j]), temp_col, csv_data[,j])
View(csv_data)
ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j])
csv_data <- transform(csv_data, csv_data[,j] = ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j]))
View(csv_data)
is.na(csv_data[,j])
csv_data$temp_col
csv_data <- transform(csv_data, cn_data[j] = ifelse(is.na(csv_data[,j]), temp_col, csv_data[,j]))
csv_data <- transform(csv_data, cn_data[j] <- ifelse(is.na(csv_data[,j]), temp_col, csv_data[,j]))
transform(csv_data, cn_data[j] = ifelse(is.na(csv_data[,j]), temp_col, csv_data[,j]))
lenght(is.na(csv_data[,j]))
length(is.na(csv_data[,j]))
length(temp_col)
length(csv_data$temp_col)
length(csv_data[,j]))
length(csv_data[,j])
ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j])
cn_data[j]
length(csv_data[,j]))
length(csv_data[,j])
csv_data <- transform(csv_data, csv_data[,j] = ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j]))
csv_data <- transform(csv_data, csv_data[,j] == ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j]))
View(csv_data)
csv_data$temp_col <- NULL
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, temp_col = ave(csv_data[,j], daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data <- transform(csv_data, csv_data[,j] == ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j]))
csv_data$temp_col <- NULL
}
View(csv_data)
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, temp_col = ave(csv_data[,j], daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data[,j] <- ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j])
csv_data$temp_col <- NULL
}
View(csv_data)
csv_data$daymonth <- NULL
climodr::check.csv(method = "proc", safe_output = TRUE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::check.csv(method = "proc", safe_output = TRUE)
paste0(csv_paths[[i]], "_no_NAs.csv")
paste0("csv_",[[i]], "_no_NAs.csv"
paste0("csv_", i, "_no_NAs.csv")
else {
file.path(envrmt$path_data, paste0("csv_", i, "_no_NAs.csv"))
