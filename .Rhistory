cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv, na.rm = TRUE))**2, na.rm = TRUE)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv, na.rm = TRUE))**2, na.rm = TRUE)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2, na.rm = TRUE)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
data.frame(NAME = c("cross validation F value",
"linear model F value",
"cross validation r squared",
"linear model r squared"),
VALUE = c(round(mss_model / mss_resid, 2),
round(anova(lmod)$'F value'[1], 2),
round(1 - ss_resid / ss_obsrv, 2),
round(summary(lmod)$r.squared, 2)))
se <- function(x) sd(x, na.rm = TRUE)/sqrt(length(na.exclude(x)))
me <- round(mean(cv_sample$pred - cv_sample$obs, na.rm = TRUE), 2)
me_sd <- round(se(cv_sample$pred - cv_sample$obs), 2)
mae <- round(mean(abs(cv_sample$pred - cv_sample$obs), na.rm = TRUE), 2)
mae_sd <- round(se(abs(cv_sample$pred - cv_sample$obs)), 2)
rmse <- round(sqrt(mean((cv_sample$pred - cv_sample$obs)^2, na.rm = TRUE)), 2)
rmse_sd <- round(se((cv_sample$pred - cv_sample$obs)^2), 2)
data.frame(NAME = c("Mean error (ME)", "Std. error of ME",
"Mean absolute error (MAE)", "Std. error of MAE",
"Root mean square error (RMSE)", "Std. error of RMSE"),
VALUE = c(me, me_sd,
mae, mae_sd,
rmse, rmse_sd))
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), function(i){
set.seed(i)
smpl <- sample(range, nbr)
train <- lu[smpl,]
test <- lu[-smpl,]
lmod <- lm(Settlement ~ Recreation, data = train)
pred <- predict(lmod, newdata = test)
obsv <- test$Recreation
resid <- obsv - pred
ss_obsrv <- sum((obsv - mean(obsv))**2)
ss_model <- sum((pred - mean(obsv))**2)
ss_resid <- sum((obsv - pred)**2)
mss_obsrv <- ss_obsrv / (length(obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(obsv) - 2)
data.frame(pred = pred,
obsv = obsv,
resid = resid,
ss_obsrv = ss_obsrv,
ss_model = ss_model,
ss_resid = ss_resid,
mss_obsrv = mss_obsrv,
mss_model = mss_model,
mss_resid = mss_resid,
r_squared = ss_model / ss_obsrv
)
})
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
data.frame(NAME = c("cross validation F value",
"linear model F value",
"cross validation r squared",
"linear model r squared"),
VALUE = c(round(mss_model / mss_resid, 2),
round(anova(lmod)$'F value'[1], 2),
round(1 - ss_resid / ss_obsrv, 2),
round(summary(lmod)$r.squared, 2)))
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
lmod <- lm(dep ~ ind)
plot(ind, dep)
abline(lmod, col = "red")
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), validate)
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
data.frame(NAME = c("cross validation F value",
"linear model F value",
"cross validation r squared",
"linear model r squared"),
VALUE = c(round(mss_model / mss_resid, 2),
round(anova(lmod)$'F value'[1], 2),
round(1 - ss_resid / ss_obsrv, 2),
round(summary(lmod)$r.squared, 2)))
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu <- tidyr::drop_na(lu)
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
lmod <- lm(dep ~ ind)
plot(ind, dep)
abline(lmod, col = "red")
View(lu)
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
head(lu)
lu <- tidyr::drop_na(lu[,6:9])
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
lmod <- lm(dep ~ ind)
plot(ind, dep)
abline(lmod, col = "red")
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), validate)
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
data.frame(NAME = c("cross validation F value",
"linear model F value",
"cross validation r squared",
"linear model r squared"),
VALUE = c(round(mss_model / mss_resid, 2),
round(anova(lmod)$'F value'[1], 2),
round(1 - ss_resid / ss_obsrv, 2),
round(summary(lmod)$r.squared, 2)))
se <- function(x) sd(x, na.rm = T)/sqrt(length(na.exclude(x)))
me <- round(mean(cv_sample$pred - cv_sample$obs, na.rm = TRUE), 2)
me_sd <- round(se(cv_sample$pred - cv_sample$obs), 2)
mae <- round(mean(abs(cv_sample$pred - cv_sample$obs), na.rm = TRUE), 2)
mae_sd <- round(se(abs(cv_sample$pred - cv_sample$obs)), 2)
rmse <- round(sqrt(mean((cv_sample$pred - cv_sample$obs)^2, na.rm = TRUE)), 2)
rmse_sd <- round(se((cv_sample$pred - cv_sample$obs)^2), 2)
data.frame(NAME = c("Mean error (ME)", "Std. error of ME",
"Mean absolute error (MAE)", "Std. error of MAE",
"Root mean square error (RMSE)", "Std. error of RMSE"),
VALUE = c(me, me_sd,
mae, mae_sd,
rmse, rmse_sd))
anova(cv_sample)
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu <- tidyr::drop_na(lu[,6:7])
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu <- tidyr::drop_na(lu[,6:7])
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu <- tidyr::drop_na(lu, lu[6:7])
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu_na <- tidyr::drop_na(lu[6:7])
head(lu)
dep <- lu_na$Recreation
ind <- lu_na$Settlement
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu_na <- tidyr::drop_na(lu[6:7])
head(lu)
dep <- lu_na$Recreation
ind <- lu_na$Settlement
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu_na <- tidyr::drop_na(lu[6:9])
head(lu)
dep <- lu_na$Recreation
ind <- lu_na$Settlement
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu_na <- tidyr::drop_na(lu[6:7])
head(lu)
dep <- lu_na$Recreation
ind <- lu_na$Settlement
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu_na <- tidyr::drop_na(lu[6:7])
head(lu_na)
dep <- lu_na$Recreation
ind <- lu_na$Settlement
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu <- tidyr::drop_na(lu[6:7])
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
lmod <- lm(dep ~ ind)
plot(ind, dep)
abline(lmod, col = "red")
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), validate)
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
data.frame(NAME = c("cross validation F value",
"linear model F value",
"cross validation r squared",
"linear model r squared"),
VALUE = c(round(mss_model / mss_resid, 2),
round(anova(lmod)$'F value'[1], 2),
round(1 - ss_resid / ss_obsrv, 2),
round(summary(lmod)$r.squared, 2)))
View(cv_sample)
test <- lu[-smpl,]
smpl <- sample(range, nbr)
train <- lu[smpl,]
test <- lu[-smpl,]
View(test)
test$Recreation
set.seed(i)
i = lol
i = 707
set.seed(i)
smpl <- sample(range, nbr)
train <- lu[smpl,]
test <- lu[-smpl,]
lmod <- lm(Settlement ~ Recreation, data = train)
pred <- predict(lmod, newdata = test)
obsv <- test$Recreation
resid <- obsv - pred
ss_obsrv <- sum((obsv - mean(obsv))**2)
ss_model <- sum((pred - mean(obsv))**2)
ss_resid <- sum((obsv - pred)**2)
mss_obsrv <- ss_obsrv / (length(obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(obsv) - 2)
data.frame(pred = pred,
obsv = obsv,
resid = resid,
ss_obsrv = ss_obsrv,
ss_model = ss_model,
ss_resid = ss_resid,
mss_obsrv = mss_obsrv,
mss_model = mss_model,
mss_resid = mss_resid,
r_squared = ss_model / ss_obsrv
)
resid
View(cv_sample)
cv_sample
se <- function(x) sd(x)/sqrt(length(na.exclude(x)))
me <- round(mean(cv_sample$pred - cv_sample$obs), 2)
me_sd <- round(se(cv_sample$pred - cv_sample$obs), 2)
mae <- round(mean(abs(cv_sample$pred - cv_sample$obs)), 2)
mae_sd <- round(se(abs(cv_sample$pred - cv_sample$obs)), 2)
rmse <- round(sqrt(mean((cv_sample$pred - cv_sample$obs)^2)), 2)
rmse_sd <- round(se((cv_sample$pred - cv_sample$obs)^2), 2)
data.frame(NAME = c("Mean error (ME)", "Std. error of ME",
"Mean absolute error (MAE)", "Std. error of MAE",
"Root mean square error (RMSE)", "Std. error of RMSE"),
VALUE = c(me, me_sd,
mae, mae_sd,
rmse, rmse_sd))
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), validate)
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu <- tidyr::drop_na(lu[6:7])
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
lmod <- lm(dep ~ ind)
plot(ind, dep)
abline(lmod, col = "red")
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), crossvalidate)
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), validate)
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), crossvalidate)
set.seed(i)
smpl <- sample(range, nbr)
train <- lu[smpl,]
test <- lu[-smpl,]
lmod <- lm(Settlement ~ Recreation, data = train)
pred <- predict(lmod, newdata = test)
obsv <- test$Recreation
resid <- obsv - pred
rmse <- sqrt((pred - obs)^2)
sqrt((pred - obs)^2)
se <- function(x) sd(x)/sqrt(length(na.exclude(x)))
me <- round(mean(cv_sample$pred - cv_sample$obsv), 2)
me_sd <- round(se(cv_sample$pred - cv_sample$obsv), 2)
mae <- round(mean(abs(cv_sample$pred - cv_sample$obsv)), 2)
mae_sd <- round(se(abs(cv_sample$pred - cv_sample$obsv)), 2)
rmse <- round(sqrt(mean((cv_sample$pred - cv_sample$obsv)^2)), 2)
rmse_sd <- round(se((cv_sample$pred - cv_sample$obsv)^2), 2)
data.frame(NAME = c("Mean error (ME)", "Std. error of ME",
"Mean absolute error (MAE)", "Std. error of MAE",
"Root mean square error (RMSE)", "Std. error of RMSE"),
VALUE = c(me, me_sd,
mae, mae_sd,
rmse, rmse_sd))
rmse <- sqrt((pred - obsv)^2)
rmse <- mean(sqrt((pred - obsv)^2))
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), crossvalidate)
library(car)
data_path <- "C:/Users/Alexander/Documents/Uni/WiSe22/Datenanalyse/Data"
code_path <- "C:/Users/Alexander/Documents/GitHub/mpg-data-analysis-2022-Kluga/Assignments"
source(file.path(code_path,"Session_06", "functions.R"))
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
lu <- tidyr::drop_na(lu[6:7])
head(lu)
dep <- lu$Recreation
ind <- lu$Settlement
lmod <- lm(dep ~ ind)
plot(ind, dep)
abline(lmod, col = "red")
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), crossvalidate)
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
data.frame(NAME = c("cross validation F value",
"linear model F value",
"cross validation r squared",
"linear model r squared"),
VALUE = c(round(mss_model / mss_resid, 2),
round(anova(lmod)$'F value'[1], 2),
round(1 - ss_resid / ss_obsrv, 2),
round(summary(lmod)$r.squared, 2)))
se <- function(x) sd(x)/sqrt(length(na.exclude(x)))
me <- round(mean(cv_sample$pred - cv_sample$obsv), 2)
me_sd <- round(se(cv_sample$pred - cv_sample$obsv), 2)
mae <- round(mean(abs(cv_sample$pred - cv_sample$obsv)), 2)
mae_sd <- round(se(abs(cv_sample$pred - cv_sample$obsv)), 2)
rmse <- round(sqrt(mean((cv_sample$pred - cv_sample$obsv)^2)), 2)
rmse_sd <- round(se((cv_sample$pred - cv_sample$obsv)^2), 2)
data.frame(NAME = c("Mean error (ME)", "Std. error of ME",
"Mean absolute error (MAE)", "Std. error of MAE",
"Root mean square error (RMSE)", "Std. error of RMSE"),
VALUE = c(me, me_sd,
mae, mae_sd,
rmse, rmse_sd))
plot(cv_sample$rmse)
plot(cv_sample$rmse, type = "l")
plot(cv_sample$rmse, type = "b")
plot(cv_sample$rmse, type = "l")
View(cv_sample)
unique(cv_sample$rmse)
plot(unique(cv_sample$rmse), type = "l")
plot(unique(cv_sample$rmse), type = "p")
abline(cv_sample$rmse, col = "red")
rmse <- unique(cv_sample$rmse)
plot(rmse, type = "p")
abline(rmse, col = "red")
rmse <- unique(cv_sample$rmse)
plot(rmse, type = "p")
abline(mean(rmse), col = "red")
rmse <- unique(cv_sample$rmse)
plot(rmse, type = "p")
plot(mean(rmse), col = "red")
rmse <- unique(cv_sample$rmse)
plot(rmse, type = "p")
plot(mean(rmse), col = "red", type = "l")
rmse <- unique(cv_sample$rmse)
plot(rmse, type = "p")
rmse <- unique(cv_sample$rmse)
plot(rmse,
type = "p",
main = "RMSE per Crossvalidation",
xlab = "Crossvalidation run",
ylab = "RMSE")
abline(mean(rmse), 0)
rmse <- unique(cv_sample$rmse)
plot(rmse,
type = "p",
main = "RMSE per Crossvalidation",
xlab = "Crossvalidation run",
ylab = "RMSE")
abline(mean(rmse), 0, col = "red")
rmse <- unique(cv_sample$rmse)
plot(rmse,
type = "b",
main = "RMSE per Crossvalidation",
xlab = "Crossvalidation run",
ylab = "RMSE")
abline(mean(rmse), 0, col = "red")
rmse <- unique(cv_sample$rmse)
plot(rmse,
type = "p",
main = "RMSE per Crossvalidation",
xlab = "Crossvalidation run",
ylab = "RMSE")
abline(mean(rmse), 0, col = "red")
rmse <- unique(cv_sample$rmse)
plot(rmse,
type = "b",
main = "RMSE per Crossvalidation",
xlab = "Crossvalidation run",
ylab = "RMSE")
abline(mean(rmse), 0, col = "red")
range <- nrow(lu)
nbr <- range * 0.8
cv_sample <- lapply(seq(100), crossvalidate)
cv_sample <- do.call("rbind", cv_sample)
ss_obsrv <- sum((cv_sample$obsv - mean(cv_sample$obsv))**2)
ss_model <- sum((cv_sample$pred - mean(cv_sample$obsv))**2)
ss_resid <- sum((cv_sample$obsv - cv_sample$pred)**2)
mss_obsrv <- ss_obsrv / (length(cv_sample$obsv) - 1)
mss_model <- ss_model / 1
mss_resid <- ss_resid / (length(cv_sample$obsv) - 2)
data.frame(NAME = c("cross validation F value",
"linear model F value",
"cross validation r squared",
"linear model r squared"),
VALUE = c(round(mss_model / mss_resid, 2),
round(anova(lmod)$'F value'[1], 2),
round(1 - ss_resid / ss_obsrv, 2),
round(summary(lmod)$r.squared, 2)))
se <- function(x) sd(x)/sqrt(length(na.exclude(x)))
me <- round(mean(cv_sample$pred - cv_sample$obsv), 2)
me_sd <- round(se(cv_sample$pred - cv_sample$obsv), 2)
mae <- round(mean(abs(cv_sample$pred - cv_sample$obsv)), 2)
mae_sd <- round(se(abs(cv_sample$pred - cv_sample$obsv)), 2)
rmse <- round(sqrt(mean((cv_sample$pred - cv_sample$obsv)^2)), 2)
rmse_sd <- round(se((cv_sample$pred - cv_sample$obsv)^2), 2)
data.frame(NAME = c("Mean error (ME)", "Std. error of ME",
"Mean absolute error (MAE)", "Std. error of MAE",
"Root mean square error (RMSE)", "Std. error of RMSE"),
VALUE = c(me, me_sd,
mae, mae_sd,
rmse, rmse_sd))
rmse <- unique(cv_sample$rmse)
plot(rmse,
type = "b",
main = "RMSE per Crossvalidation",
xlab = "Crossvalidation run",
ylab = "RMSE")
abline(mean(rmse), 0, col = "red")
lu <- readRDS(file.path(data_path, "lu_clean.rds"))
head(lu)
