envrmt$path_models,
paste0(modname,
"_ffs_model.rds")
)
)
print(
paste0(
"Making ",
mod_df[i, ]$sensor,
" ",
mod_df[i, ]$classifier,
"-prediction for ",
dates[i],
"."
)
)
pred <- terra::predict(
raster,
mod,
na.rm = TRUE
)
names(pred) <- modname
terra::writeRaster(
pred,
file.path(
envrmt$path_predictions,
paste0(
modname,
"_prediction.tif"
)
),
overwrite = TRUE
)
if (isTRUE(AOA)) try({
oldw <- getOption("warn") # old settings
options(warn = -1) # turn off warnings
aoa <- CAST::aoa(
newdata = raster,
model = mod)
names(aoa) <- paste0(modname, "_aoa")
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
options(warn = oldw) # return old warning settings
})
} # end i loop
oldw <- getOption("warn") # old settings
options(warn = -1) # turn off warnings
aoa <- CAST::aoa(
newdata = raster,
model = mod)
names(aoa) <- paste0(modname, "_aoa")
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
aoa
aoa$AOA
aoa <- CAST::aoa(
newdata = raster,
model = mod)
aoa$AOA
names(aoa$AOA)
names(aoa$AOA) <- paste0(modname, "_aoa")
aoa$AOA
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
options(warn = oldw) # return old warning settings
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif")
head(predlist)
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(overwrite = TRUE)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif")
head(predlist)
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(overwrite = TRUE)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif", recursive = TRUE)
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = TRUE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
ac <- data.frame(ac_code = c(0, 1),
ac_class = c("applicable",
"not applicable"))
mnote = "vignette"
sensor = "Ta_200"
all_preds <- list.files(
envrmt$path_predictions,
pattern = ".tif",
recursive = FALSE)
s = 1
preds <- all_preds[which(grepl(all_preds, pattern = paste0(mnote, "_", sensor[s])))]
print(paste0("Creating maps for sensor [", sensor[s], "]."))
i = 1
filename <- gsub("_prediction.tif.*", "", preds[i])
prediction <- terra::rast(file.path(envrmt$path_predictions, preds[i]))
AOA <- terra::rast(file.path(envrmt$path_aoa, paste0(filename, "_aoa.tif")))
View(ac)
terra::levels(AOA) <- ac
levels(AOA) <- ac
terra::plot(AOA)
terra::plot(AOA,
col = c("", "grey"),
add = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 1),
"grey"),
add = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 1),
"grey"))
mapcolors = rev(heat.colors(50))
scale_position = "bottomleft"
north_position = "topright"
terra::plot(
main = filename,
prediction,
col = mapcolors,
background = "lightgrey",
box = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 1),
"grey"),
legend = "bottomright",
add = TRUE)
terra::plot(
main = filename,
prediction,
col = mapcolors,
background = "lightgrey",
box = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 0),
"grey"),
legend = "bottomright",
add = TRUE)
View(csv_fin)
View(prediction)
v <- terra::vect(csv_fin, geom = c("x", "y"), crs = terra::crs(prediction))
terra::plot(v, add = TRUE, legend = FALSE)
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(overwrite = TRUE)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif", recursive = TRUE)
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = TRUE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
library(climodr)
?envi.create
roxygen2::roxygenise()
roxygen2::roxygenise()
list.files
list.files(envrmt$path_dep)
envrmt$path_dep
climodr::envi.create("E:/climodr/vignette")
list.files(envrmt$path_dep)
x <- read.csv(list.files(envrmt$path_dep)[1])
x <- read.csv(list.files(envrmt$path_dep, full.names = TRUE)[1])
View(x)
x <- read.csv(list.files(envrmt$path_dep, full.names = TRUE)[1], row.names = 1)
View(x)
envrmt$path_dep
list.files(envrmt$path_dep)
x <- terra::rast(list.files(envrmt$path_dep, full.names = TRUE)[2])
x
list.files(envrmt$path_vector)
x <- terra::vect(list.files(envrmt$path_vector, full.names = TRUE)[1])
x
list.files(envrmt$path_raster)
x <- terra::rast(list.files(envrmt$path_raster, full.names = TRUE)[1])
x
names(x)
unquote(names(x))
noquote(names(x))
min(x)
max(x)
x <- terra::rast(list.files(envrmt$path_raster, full.names = TRUE)[2])
x
list.files(envrmt$path_tabular)
x <- read.csv(list.files(envrmt$path_tabular, full.names = T)[1])
x
header(x)
head(x)
roxygen2::roxygenise()
roxygen2::roxygenise()
remotes::install_github("eddelbuettel/dang")
remotes::install_github("eddelbuettel/dang")
gitcreds::gitcreds_set()
remotes::install_github("eddelbuettel/dang")
dang::checkPackageAsciiCode(dir = "C:/Users/Alexander/Documents/GitHub/climodr")
.check_package_ASCII_code
list.files("C:/Users/Alexander/Documents/GitHub/climodr")
list.files("C:/Users/Alexander/Documents/GitHub/climodr", recursive = TRUE, full.names = T)
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr", recursive = TRUE, full.names = T)){
dang::checkPackageAsciiCode(i)
}
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr",
recursive = TRUE,
full.names = T)) try({
dang::checkPackageAsciiCode(i)
})
dang::checkPackageAsciiCode("C:/Users/Alexander/Documents/GitHub/climodr/R")
x <- dang::checkPackageAsciiCode(dir = i)
View(x)
remove(x)
x <- dang::checkPackageAsciiCode(dir = i)
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr",
recursive = TRUE,
full.names = T)) try({
x <- dang::checkPackageAsciiCode(dir = i)
})
x <- dang::checkPackageAsciiCode(dir = "C:\Users\Alexander\Documents\GitHub\climodr\R")
x <- dang::checkPackageAsciiCode(dir = "C:/Users/Alexander/Documents/GitHub/climodr/R")
for (i in list.files("C:/Users/Alexander/Documents/GitHub/climodr",
recursive = FALSE,
full.names = T)) try({
x <- dang::checkPackageAsciiCode(dir = "C:/Users/Alexander/Documents/GitHub/climodr/R")
})
a <- list.files("C:/Users/Alexander/Documents/GitHub/climodr", full.names = T)
a <- list.files("C:/Users/Alexander/Documents/GitHub/climodr", full.names = T)
i = 1
while (i < length(a)) try({
x <- dang::checkPackageAsciiCode(dir = a[i])
i = i + 1
})
a[1]
length(a)
i = i + 1
while (i < length(a)) try({
x <- dang::checkPackageAsciiCode(dir = a[i])
i = i + 1
})
i = i + 1
while (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
i = 1
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
if (i < length(a)) {
try(x <- dang::checkPackageAsciiCode(dir = a[i]))
i = i + 1
}
ext_vignette
terra::unwrap(ext_vignette)
stringi::stri_enc_toascii(terra::unwrap(ext_vignette))
stringi::stri_enc_toascii(terra::crs(terra::unwrap(ext_vignette)))
a <- terra::unwrap(ext_vignette)
b <- stringi::stri_enc_toascii(terra::crs(a))
terra::crs(b)
terra::crs(a) <- terra::crs(b)
grepl("[^ -~]", terra::crs(a))
# Input vector folder
ext_vignette <- wrap(a)
library(usethis)
library(terra)
# Input vector folder
ext_vignette <- wrap(a)
usethis::use_data(ext_vignette, overwrite = TRUE)
rm(ext_vignette)
roxygen2::roxygenise()
