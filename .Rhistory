colnames(p_fit)
count(which(p_fit == TRUE))
which(p_fit == TRUE)
sum(which(p_fit == TRUE))
count(p_fit)
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
which(p_fit == TRUE)
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
set.seed(707)
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
set.seed(707)
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
length(which(p_fit == TRUE))
par(mfrow = c(10,10))
for(i in seq(100)){
plot(lmodels[[i]], which = 2)
}
p_fit[[20]]
for (i in seq(100)){
if (p_fit[[i]] == TRUE){
plot(lmodels[[i]], which = 2)
}
par(mfrow = c(3,2))
for (i in seq(100)){
if (p_fit[[i]] == TRUE){
plot(lmodels[[i]], which = 2)
}
par(mfrow = c(2,3))
for (i in seq(100)){
if (p_fit[[i]] == TRUE){
plot(lmodels[[i]], which = 2)
}
p_fit == TRUE
which(p_fit == TRUE)
plot(lmodels[[3]], which = 2)
plot(lmodels[[20]], which = 2)
plot(lmodels[[80], which = 2)
plot(lmodels[[80]], which = 2)
par(mfrow = c(2,3))
for (i in seq(100)){
if (p_fit[[i]] == TRUE){
plot(lmodels[[i]],
which = 2,
main = paste0("Normal Q-Q, lm_", i)
)
}
par(mfrow = c(2,3))
for (i in seq(100)){
if (p_fit[[i]] == TRUE){
plot(lmodels[[i]],
which = 2,
main = paste0("Normal Q-Q, lm_", i)
)
}
par(mfrow = c(2,3))
for (i in seq(100)){
if (p_fit[[i]] == TRUE){
plot(lmodels[[i]], which = 2)
}
View(lu)
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print("p < 0.05: ", which(p_fit == TRUE))
print("Total:", length(which(p_fit == TRUE)), " models")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print("p < 0.05: ", which(p_fit == TRUE))
paste0("Total: ", length(which(p_fit == TRUE)), " models")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
paste0("p < 0.05: ", which(p_fit == TRUE))
paste0("Total: ", length(which(p_fit == TRUE)), " models")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("p < 0.05: ", which(p_fit == TRUE)))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", i))
print(paste0("p < 0.05: ", c(which(p_fit == TRUE))))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", i))
print(paste0("p < 0.05: ", as.vector(which(p_fit == TRUE))))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(paste0("p < 0.05: ", as.list(which(p_fit == TRUE))))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"), "\n")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"), \n)
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"), "\n")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models", "\n"))
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print("")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print()
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print("#-------------#")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print("#--------------------#")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print("--------------------")
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print("#--------------------#", quote = FALSE)
}
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print("--------------------", quote = FALSE)
}
set.seed(707)
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
for (j in seq(5)){
lmodels <-  lapply(seq(100), function(i){
lm(sample(dep, 50) ~ sample(ind, 50))
})
p_fit <- lapply(lmodels, function(i){
summary(i)$coefficients[2,4] < 0.05
})
print(paste0("Run Nr.", j))
print(which(p_fit == TRUE))
print(paste0("Total: ", length(which(p_fit == TRUE)), " models"))
print("--------------------", quote = FALSE)
}
par(par_org)
par(mfrow = c(2,2))
for (i in seq(100)){
if (p_fit[[i]] == TRUE){
plot(lmodels[[i]], which = 2)
}
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
climodr::envi.create("E:/climodr/showcase")
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
climodr::envi.create("E:/climodr/showcase")
envrmt$path_raster
rast_data <- climodr::crop.all(method = "Input")
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
rast_data <- climodr::crop.all(method = "Input")
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
rast_data <- climodr::crop.all(method = "Input")
terra::plot(rast_data[[1:4]])
View(rast_data)
terra::plot(rast_data[[2:3]])
terra::plot(rast_data[[3]])
climodr::prep.csv(method = "proc", safe_output = TRUE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::prep.csv(method = "proc", safe_output = TRUE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::prep.csv(method = "proc", safe_output = TRUE)
file.path(Input, paste0(csv_paths[[i]]))
climodr::prep.csv(method = "proc", safe_output = TRUE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::prep.csv(method = "proc", safe_output = TRUE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::prep.csv(method = "proc", safe_output = TRUE)
csv_list <- list();
Input <- envrmt$path_tabular
all_files_in_distribution <- list.files(path = Input, recursive = T); #reads all data in Input-Folder
csv_paths <- grep(".csv$", all_files_in_distribution, value=TRUE);
number_of_csvs <- length(csv_paths);
for (i in 1:number_of_csvs){
csv_data <- read.csv(file.path(Input, paste0(csv_paths[[i]])), sep = ",")
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
csv_data$daymonth <- strftime(csv_data[,2], format = "%m-%d")
csv_data$year<- strftime(csv_data[,2], format = "%y")
csv_data$month <- strftime(csv_data[,2], format = "%m")
csv_data$day <- strftime(csv_data[,2], format = "%d")
csv_data <- csv_data[, c(cn_data[1:2], "daymonth", "year", "month", "day", cn_data[3:number_of_cn])]
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
for (j in 7:number_of_cn){
csv_data <- transform(csv_data, temp_col = ave(csv_data[,j], daymonth, FUN = function(x) mean(x, na.rm = TRUE)))
csv_data[,j] <- ifelse(is.na(csv_data[,j]), csv_data$temp_col, csv_data[,j])
csv_data$temp_col <- NULL
}
csv_data$daymonth <- NULL
write.csv(csv_data, file.path(envrmt$path_tworkflow, paste0(csv_data[[1,1]], "_no_NAs.csv")), row.names = FALSE)
};
csv_paths
climodr::prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$", list.files(envrmt$path_tworkflow), value=TRUE)
csv_files
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
set.seed(NULL)
?caret::train()
