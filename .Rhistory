devtools::load_all()
### Initiate Climodr ###
climodr::envi.create("E:/climodr/showcase")
# Prepare CSV-Data
climodr::prep.csv(method = "proc", safe_output = TRUE)
# Check the created csv files
csv_files <- grep("_no_NAs.csv$", list.files(envrmt$path_tworkflow), value=TRUE)
csv_files
# Process CSV-Data
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
# Check again
head(csv_data)
# Create spatial CSV-Data
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
# Check again
head(csv_spat)
# Finalize CSV-Data
csv_fin <- climodr::fin.csv(method = "monthly",
safe_output = TRUE)
# Check one last time
head(csv_fin)
devtools::load_all()
### Initiate Climodr ###
climodr::envi.create("E:/climodr/showcase")
# Prepare CSV-Data
climodr::prep.csv(method = "proc", safe_output = TRUE)
# Check the created csv files
csv_files <- grep("_no_NAs.csv$", list.files(envrmt$path_tworkflow), value=TRUE)
csv_files
# Process CSV-Data
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
# Check again
head(csv_data)
# Create spatial CSV-Data
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
# Check again
head(csv_spat)
View(csv_data)
# Finalize CSV-Data
csv_fin <- climodr::fin.csv(method = "monthly",
safe_output = TRUE)
# Check one last time
head(csv_fin)
# Modelling
climodr::calc.model(timespan = c(18),
response = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:56),
tc_method = "cv",
metric = "RMSE")
library(DescTools)
devtools::load_all()
# Modelling
climodr::calc.model(timespan = c(18),
response = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:56),
tc_method = "cv",
metric = "RMSE")
View(csv_fin)
# Modelling
climodr::calc.model(timespan = c(18),
response = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
timespan = c(18),
timespan = c(18)
response = c(6)
classifier = c("rf", "pls","nnet" ,"lm")
seed = 707
p = 0.8
fold = "LLO"
mnote = "normal"
predrows = c(16:55)
tc_method = "cv"
metric = "RMSE"
data_o <- read.csv(file.path(envrmt$path_tfinal, "final_monthly.csv"));
df_total <- data.frame();
y = 18
data_y <- data_o[data_o$year %like% y, ]
data <- data_y[complete.cases(data_y), ]
time <- y
print(time)
s = 6
set.seed(seed)
partition_indexes <- caret::createDataPartition(data$plot,
times = 1,
p = p,
list = FALSE)
trainingDat <- data[partition_indexes, ]
testingDat <- data[-partition_indexes, ]
save(trainingDat, file = file.path(envrmt$path_tfinal, paste0(time, mnote, "_", "trainingDat.RData")))
save(testingDat, file = file.path(envrmt$path_tfinal, paste0(time, mnote, "_", "testingDat.RData")))
if (fold == "LLO"){
folds <- CAST::CreateSpacetimeFolds(trainingDat, spacevar = "plot", k = 3) #set k to the number of unique spatial or temporal units. (k = 3)
}
ctrl <- caret::trainControl(method = "cv",
index = folds$index,
savePredictions=TRUE
)
predictors <- trainingDat[ ,predrows]
response <- trainingDat[ ,s]
if (s == 6){sensor = "tem"}
print(paste0(colnames(trainingDat[s]), " = ", sensor))
i = 1
method = classifier[i]
print(method)
if (method == "rf"){
tuneLength <- 1
tuneGrid <- expand.grid(mtry = 2)
}
if (method == "pls"){
predictors <- data.frame(scale(predictors))
tuneLength <- 10
}
if (method == "nnet"){
tuneLength <- 1
predictors <- data.frame(scale(predictors))
tuneGrid <- expand.grid(size = seq(2,ncol(predictors),2),
decay = seq(0,0.1,0.025)
)
ifnnet <- TRUE
} else {
ifnnet <- FALSE
}
ffsmodel <- CAST::ffs(predictors[,2:41],
response,
metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
#trace = ifnnet,
#linout = TRUE,
verbose = ifnnet,
maximize = ifelse(metric == "RMSE", FALSE, TRUE)
)
ffsmodel <- CAST::ffs(predictors,
response,
metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
#trace = ifnnet,
#linout = TRUE,
verbose = ifnnet,
maximize = ifelse(metric == "RMSE", FALSE, TRUE)
)
detach("package:DescTools", unload = TRUE)
ffsmodel <- CAST::ffs(predictors,
response,
metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
#trace = ifnnet,
#linout = TRUE,
verbose = ifnnet,
maximize = ifelse(metric == "RMSE", FALSE, TRUE)
)
library(DescTools)
ffsmodel <- CAST::ffs(predictors,
response,
metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
trace = ifnnet,
linout = TRUE,
verbose = ifnnet
)
View(predictors)
tuneGrid
expand.grid(size = seq(2,ncol(predictors),2),
decay = seq(0,0.1,0.025)
)
CAST::ffs(predictors,
response,
metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
trace = ifnnet,
linout = TRUE,
verbose = ifnnet
)
?predict
model <- caret::train(predictors,
response,
metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
trace = ifnnet,
linout = TRUE,
verbose = ifnnet)
model <- caret::train(predictors,
response,
#metric = "RMSE",
withinSE = FALSE,
method = method,
importance = TRUE,
tuneLength = tuneLength,
tuneGrid = tuneGrid,
trControl = ctrl,
trace = ifnnet,
linout = TRUE,
verbose = ifnnet)
devtools::load_all()
### Initiate Climodr ###
climodr::envi.create("E:/climodr/showcase")
# Modelling
climodr::calc.model(timespan = c(18),
response = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
devtools::load_all()
# Modelling
climodr::calc.model(timespan = c(18),
response = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
devtools::load_all()
# Modelling
climodr::calc.model(timespan = c(18),
response = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
devtools::load_all()
### Initiate Climodr ###
climodr::envi.create("D:/users/kluga/showcase")
# Prepare CSV-Data
climodr::prep.csv(method = "proc", safe_output = TRUE)
# Check the created csv files
csv_files <- grep("_no_NAs.csv$", list.files(envrmt$path_tworkflow), value=TRUE)
csv_files
# Process CSV-Data
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
# Check again
head(csv_data)
# Create spatial CSV-Data
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
# Check again
head(csv_spat)
# Finalize CSV-Data
csv_fin <- climodr::fin.csv(method = "monthly",
safe_output = TRUE)
# Check one last time
head(csv_fin)
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
remove.packages("DescTools")
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
install.packages("DescTools")
install.packages("DescTools")
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
devtools::load_all()
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
renv::activate()
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE")
# Modelling
climodr::calc.model(timespan = c(18),
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "no0410",
predrows = c(16:55),
tc_method = "cv",
#metric = "RMSE"
)
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "no0410",
predrows = c(16:55),
tc_method = "cv",
#metric = "RMSE"
)
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "no0410",
predrows = c(16:55),
#tc_method = "cv",
#metric = "RMSE"
)
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
#mnote = "no0410",
predrows = c(16:55),
#tc_method = "cv",
#metric = "RMSE"
)
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
#fold = "LLO",
#mnote = "no0410",
predrows = c(16:55),
#tc_method = "cv",
#metric = "RMSE"
)
climodr
# Modelling
climodr::calc.model(timespan = c(18),
climresp = c(6), # c(6, 9, 12, 13)
classifier = c("rf", "pls","nnet" ,"lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "no0410",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE"
)
dev.off()
