overwrite = TRUE)
View(csv_data)
#extract station coordinates
csv_spat <- spat.csv(envrmt = envrmt,
method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
#extract predictor values from raster files
csv_fin <- fin.csv(envrmt = envrmt,
method = "monthly",
save_output = TRUE)
# Test data for autocorrelation after running fin.csv
autocorr(envrmt = envrmt,
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = FALSE)
# Create 36 different models (12 months x 3 classifiers) for every month in 2017
calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "normal",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
# Make predictions
climpred(envrmt = envrmt,
method = "monthly",
metric = "accuracy",
mnote = "normal",
AOA = TRUE)
View(csv_fin)
csv_fin[1,]
csv_fin[,1]
# Make predictions
results <- climpred(envrmt = envrmt,
method = "monthly",
metric = "accuracy",
mnote = "normal",
AOA = TRUE)
method = "monthly"
metric = "accuracy"
mnote = "normal"
AOA = TRUE)
AOA = TRUE
# create list for results and later function output
results <- list()
val <- data.frame(model_name = character(),
RMSE = integer(),
SD = integer())
# create a list with all raster images
tiff_list <- list.files(
path = envrmt$path_rfinal,
pattern = ".tif",
recursive = TRUE
)
# read dgm
dgm <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = "_dgm_",
tiff_list,
value = TRUE)
)
)
# read eval_df
eval_df <- readRDS(
file.path(
envrmt$path_statistics,
paste0(
mnote,
"_mod_eval_df.rds"
)
)
)
# filter for best models
if(!metric %in%  c("accuracy", "Nrmse", "Rsqrd")){
stop("Your 'metric' argument has to consist of either 'accuracy', 'Nrmse' or 'Rsqrd'.\n Stopped execution, no model could be choosen with missing metric.")
}
expr <- c(expression(mod_date$accuracy == max(mod_date$accuracy)),
expression(mod_date$Nrmse == min(mod_date$Nrmse)),
expression(mod_date$Rsqrd == min(mod_date$Rsqrd)))[which(
metric == c("accuracy", "Nrmse", "Rsqrd")
)]
dates <- unique(eval_df[, 1])
i = 1
mod_date <- eval_df[which(eval_df[, 1] == dates[i]), ]
ifelse(
i == 1,
mod_df <- mod_date[
which(eval(expr)), ],
mod_df[i, ] <- mod_date[
which(eval(expr)), ]
)
# read fitting raster
raster <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = dates[i],
tiff_list,
value = TRUE
)
)
)
terra::add(raster) <- dgm
modname <- paste0(
mnote,
"_",
mod_df[i, ]$sensor,
"_",
dates[i],
"_",
mod_df[i, ]$modeltype,
"_",
mod_df[i, ]$classifier
)
mod <- readRDS(
file.path(
envrmt$path_models,
paste0(modname,
"_ffs_model.rds")
)
)
# Read testing data
test <- utils::read.csv(
file.path(
envrmt$path_tfinal,
paste0(
dates[i],
"_",
mnote,
"_",
mod_df[i, ]$sensor,
"_testingDat.csv"
)
)
)
test <- terra::vect(test,
geom = c("x", "y"),
crs = terra::crs(raster))
message(
paste0(
"Making ",
mod_df[i, ]$sensor,
" ",
mod_df[i, ]$classifier,
"-prediction for ",
dates[i],
"."
)
)
pred <- terra::predict(
raster,
mod,
na.rm = TRUE
)
names(pred) <- modname
terra::writeRaster(
pred,
file.path(
envrmt$path_predictions,
paste0(
modname,
"_prediction.tif"
)
),
overwrite = TRUE
)
# calculate validation
ext <- terra::extract(pred,
test)
# now, fill up the validation metrics
ext$sensor <- terra::values(test)[mod_df[i, ]$sensor][,1]
names(ext) <- c("ID", "Pred", "Obsv")
val[i,] <- c(modname,
round(sqrt(mean((ext$Obsv - ext$Pred)^2)), 5),
round(sqrt(sum((ext$Obsv - ext$Pred)^2)/(nrow(ext) - 1)), 5)
)
if (isTRUE(AOA)) try({
message("Calculating the Area of Applicability.")
suppressWarnings(
suppressMessages(
aoa <- CAST::aoa(
newdata = raster,
model = mod)
)
)
# Print percentage of non applicable areas
pct <- round(100 * terra::freq(aoa$AOA)$count[1] / sum(terra::freq(aoa$AOA)$count), 1)
message(paste0("Relative cover of non applicable area in study area for\n", modname, ": ", pct, "%"))
# Save AOA
names(aoa$AOA) <- paste0(modname, "_aoa")
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
})
isTRUE(AOA)
suppressWarnings(
suppressMessages(
aoa <- CAST::aoa(
newdata = raster,
model = mod)
)
)
aoa <- CAST::aoa(
newdata = raster,
model = mod)
raster
mod
aoa <- CAST::aoa(
newdata = raster,
model = mod)
?CAST::aoa
CAST::trainDI(mod)
mod(weights())
mod$finalModel
View(eval_df)
# Make predictions
results <- climpred(envrmt = envrmt,
method = "monthly",
metric = "nrmse",
mnote = "normal",
AOA = TRUE)
# Make predictions
results <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "normal",
AOA = TRUE)
roxygen2::roxygenise()
caret::trainControl()
?caret::trainControl()
?CAST::knndm()
roxygen2::roxygenise()
caret::createDataPartition(csv_fin$datetime,
times = 1,
p = 0.7,
list = FALSE)
c(1:10)[-c(5,6)]
#create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# Load the climodr example data into the current climodr environment
clim.sample(envrmt = envrmt)
#prepare csv-files
prep.csv(envrmt = envrmt,
method = "proc",
save_output = TRUE)
#process csv-files
csv_data <- proc.csv(envrmt = envrmt,
method = "monthly",
rbind = TRUE,
save_output = TRUE)
# Crop all raster bands
crop.all(envrmt = envrmt,
method = "MB_Timeseries",
overwrite = TRUE)
# Calculate Indices from cropped raster bands
calc.indices(envrmt = envrmt,
vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
#extract station coordinates
csv_spat <- spat.csv(envrmt = envrmt,
method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
#extract predictor values from raster files
csv_fin <- fin.csv(envrmt = envrmt,
method = "monthly",
save_output = TRUE)
# Test data for autocorrelation after running fin.csv
autocorr(envrmt = envrmt,
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = FALSE)
# Create 36 different models (12 months x 3 classifiers) for every month in 2017
calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "deftst",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
# Create 36 different models (12 months x 3 classifiers) for every month in 2017
modperf_1 <- calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "deftst",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
modperf_2 <- calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
test = c(3, 6, 9), #choose third, sixt and ninth station as test stations
folds = "LLO",
mnote = "mantst",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
modperf_3 <- calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
test = caret::createDataPartition(csv_fin$datetime,
times = 1,
p = 0.7,
list = FALSE), #create partition Index with caret
folds = "LLO",
mnote = "mancar",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
View(modperf_1)
View(modperf_3)
# Make predictions
results_1 <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "deftst",
AOA = TRUE)
results_2 <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "mantst",
AOA = TRUE)
results_3 <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "mancar",
AOA = TRUE)
View(results_3)
View(modperf_3)
results_1$Validation
results_2$Validation
results_3$Validation
View(results_1)
results_1$Validtation
results_2$Validtation
results_3$Validtation
# Make predictions
results_1 <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "deftst",
AOA = TRUE)
#create climodr environment and allow terra-functions to use 70% of RAM
envrmt <- envi.create(proj_path = tempdir(),
memfrac = 0.7)
# Load the climodr example data into the current climodr environment
clim.sample(envrmt = envrmt)
#prepare csv-files
prep.csv(envrmt = envrmt,
method = "proc",
save_output = TRUE)
#process csv-files
csv_data <- proc.csv(envrmt = envrmt,
method = "monthly",
rbind = TRUE,
save_output = TRUE)
# Crop all raster bands
crop.all(envrmt = envrmt,
method = "MB_Timeseries",
overwrite = TRUE)
# Calculate Indices from cropped raster bands
calc.indices(envrmt = envrmt,
vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
#extract station coordinates
csv_spat <- spat.csv(envrmt = envrmt,
method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
#extract predictor values from raster files
csv_fin <- fin.csv(envrmt = envrmt,
method = "monthly",
save_output = TRUE)
# Test data for autocorrelation after running fin.csv
autocorr(envrmt = envrmt,
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = FALSE)
# Create 36 different models (12 months x 3 classifiers) for every month in 2017
modperf_1 <- calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "deftst",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
modperf_2 <- calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
test = c(3, 6, 9), #choose third, sixt and ninth station as test stations
folds = "LLO",
mnote = "mantst",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
modperf_3 <- calc.model(envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = 5,
classifier = c("rf",
"pls",
"lm"),
seed = 707,
test = caret::createDataPartition(csv_fin$datetime,
times = 1,
p = 0.7,
list = FALSE), #create partition Index with caret
folds = "LLO",
mnote = "mancar",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = TRUE)
results_1 <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "deftst",
AOA = TRUE)
results_2 <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "mantst",
AOA = TRUE)
results_3 <- climpred(envrmt = envrmt,
method = "monthly",
metric = "Nrmse",
mnote = "mancar",
AOA = TRUE)
results_1$Validation
results_2$Validation
results_3$Validation
