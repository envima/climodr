clim.sample(envrmt = envrmt)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(envrmt = envrmt,
method = "proc",
save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(envrmt = envrmt,
method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(envrmt = envrmt,
method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(envrmt = envrmt,
method = "MB_Timeseries",
overwrite = TRUE)
calc.indices(envrmt = envrmt,
vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(envrmt = envrmt,
method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
envrmt = envrmt,
method = "monthly",
max_pvalue = 0.05,
resp = 5,
pred = c(8:23),
plot.corrplot = FALSE,
corrplot = "coef"
)
eval_df <- calc.model(
envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"raf",
"lim",
"pls"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
eval_df
predlist <- list.files(envrmt$path_predictions,
pattern = ".tif",
recursive = TRUE)
head(predlist)
results <- climpred(
envrmt = envrmt,
method = "monthly",
metric = "accuracy",
mnote = "vignette",
AOA = TRUE)
results
predlist <- list.files(envrmt$path_predictions,
pattern = ".tif",
recursive = TRUE)
head(predlist)
climplot(
envrmt = envrmt,
mnote = "vignette",
sensor = "Ta_200",
aoa = TRUE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(envrmt = envrmt)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
# first, list contents of raster folder and filter for viable raster formarts
raster_files <- list.files(envrmt$path_raster)
formats <- sub(".*[.]", "", raster_files)
raster_files <- raster_files[which(formats %in% c("tif", "gpkg", "shp", "vrt"))]
formats <- formats[which(formats %in% c("tif", "gpkg", "shp", "vrt"))]
# warn the user if scanning finds more then one file type.
if(length(unique(formats)) > 1){
warning("More then one filetype detected while scanning for raster data. Raster files of different types might be arranged differently and cause errors.")
}
# extract dates from filenames
dates_o <- stringr::str_sub(raster_files,
start = datepos[1],
end = datepos[2])
datepos = c(5, 10)
# extract dates from filenames
dates_o <- stringr::str_sub(raster_files,
start = datepos[1],
end = datepos[2])
dates <- lubridate::fast_strptime(dates_o, tz = Sys.timezone(location = TRUE), format = dateformat)
dateformat = "%Y%m"
dates <- lubridate::fast_strptime(dates_o, tz = Sys.timezone(location = TRUE), format = dateformat)
dates_o <- dates_o[which(!is.na(dates))] # so there is a vector with the og date names
# Now read rasters for each date, first check cropping and projection values and mask
res_area <- file.path(envrmt$path_dep, "res_area.tif")
if(is.null(crs) & file.exists(res_area)){
crs <- terra::crs(terra::rast(res_area))
} else {
stop("No valid coordinate reference system assigned in function arguments.\n Also could not find res_area.tif in Input/dep to extract one from.\n Please add valid coordinate reference system to arguments (see `?terra::crs` to find compatible ones) or make sure to have valid file with name `res_area.tif` in your Input/dep-Folder.\nStopping")
}
crs = NULL
ext = NULL
mask = NULL
if(is.null(crs) & file.exists(res_area)){
crs <- terra::crs(terra::rast(res_area))
} else {
stop("No valid coordinate reference system assigned in function arguments.\n Also could not find res_area.tif in Input/dep to extract one from.\n Please add valid coordinate reference system to arguments (see `?terra::crs` to find compatible ones) or make sure to have valid file with name `res_area.tif` in your Input/dep-Folder.\nStopping")
}
if(is.null(ext) & file.exists(res_area)){
ext <- terra::ext(terra::rast(res_area))
} else {
stop("No valid extent assigned in function arguments.\n Also could not find res_area.tif in Input/dep to extract one from.\n Please add valid extent to arguments (see `?terra::ext` to find compatible ones) or make sure to have valid file with name `res_area.tif` in your Input/dep-Folder.\nStopping.")
}
if(!is.null(mask) & is.character(mask)){
mask <- terra::vect(file.path(envrmt$path_vector, mask))
}
if(!is.null(mask)){
mask <- terra::project(mask, crs)
}
# First, read rasters without date
general_rasters <- raster_files[which(is.na(dates))]
for(i in general_rasters){
gr <- terra::rast(file.path(envrmt$path_raster, i))
gr <- terra::project(gr, crs)
ifelse(is.null(mask),
gr <- terra::crop(gr, ext),
gr <- terra::mask(gr, mask))
ifelse(i == general_rasters[1],
grs <- gr,
grs <- c(grs, gr))
remove(gr)
}
# Then, read rasters with date
dated_rasters <- raster_files[which(!is.na(dates))]
for (i in 1:length(unique(dates_o))){
read_rasters <- paste(envrmt$path_raster, dated_rasters[which(unique(dates_o)[i] %in% stringr::str_sub(dated_rasters, datepos[1], datepos[2]))], sep = "/")
for (j in read_rasters){
dr <- terra::project(terra::rast(j), crs)
ifelse(is.null(mask),
dr <- terra::crop(dr, ext),
dr <- terra::mask(dr, mask))
ifelse(j == read_rasters[i],
drs <- dr,
drs <- c(drs, dr))
remove(dr)
} # end reading dated rasters
if(add_spectral_indices & !is.null(bands)){
drs <- addSpectralIndices(x = drs,
bands = bands,
indices = "all",
add_to_x = TRUE,
stop_process = FALSE,
outliers = "cap")
}
terra::time(drs) <- rep(dates[which(!is.na(dates))][i], terra::nlyr(drs))
# save files according to input argument
if(output == "single"){
outname <- paste(unique(dates_o)[i], dateformat, paste0(filename, ".tif"), sep = "__")
terra::writeRaster(drs, file.path(envrmt$path_rworkflow, outname), overwrite = TRUE)
ifelse(i = 1,
outfile <- outname,
outfile[i] <- outname)
}
if(output == "bundle"){
ifelse(i = 1,
outfile <- drs,
terra::add(outfile) <- drs)
}
} # end i loop
add_spectral_indices = TRUE
drs
bands = c("blue", "green", "red", "nir", "swir")
names(drs)
bands = c("blue", "green", "red", "nir", "swir1")
for (i in 1:length(unique(dates_o))){
read_rasters <- paste(envrmt$path_raster, dated_rasters[which(unique(dates_o)[i] %in% stringr::str_sub(dated_rasters, datepos[1], datepos[2]))], sep = "/")
for (j in read_rasters){
dr <- terra::project(terra::rast(j), crs)
ifelse(is.null(mask),
dr <- terra::crop(dr, ext),
dr <- terra::mask(dr, mask))
ifelse(j == read_rasters[i],
drs <- dr,
drs <- c(drs, dr))
remove(dr)
} # end reading dated rasters
if(add_spectral_indices & !is.null(bands)){
drs <- addSpectralIndices(x = drs,
bands = bands,
indices = "all",
add_to_x = TRUE,
stop_process = FALSE,
outliers = "cap")
}
terra::time(drs) <- rep(dates[which(!is.na(dates))][i], terra::nlyr(drs))
# save files according to input argument
if(output == "single"){
outname <- paste(unique(dates_o)[i], dateformat, paste0(filename, ".tif"), sep = "__")
terra::writeRaster(drs, file.path(envrmt$path_rworkflow, outname), overwrite = TRUE)
ifelse(i = 1,
outfile <- outname,
outfile[i] <- outname)
}
if(output == "bundle"){
ifelse(i = 1,
outfile <- drs,
terra::add(outfile) <- drs)
}
} # end i loop
# Add Indices to function
addSpectralIndices <- function(x,
bands = c("blue", "green", "red", "nir", "swir"),
indices = "all",
add_to_x = TRUE,
stop_process = TRUE,
outliers = NULL){
# quick function for adding more indexes easy, not for export
calc.index <- function(name, formula, min = -1, max = 1){
if (indices == "all" | name %in% indices){
Index <- formula
if(! all(min < terra::values(Index) & terra::values(Index) < max, na.rm = TRUE)){
message(paste0("Some cell values for the ", name, " lie outside of the expected range."))
if (outliers == "cap"){
NDVI[NDVI < min] <- min
NDVI[NDVI > max] <- max
}
if (outliers == "remove"){
NDVI[NDVI < min] <- NA
NDVI[NDVI > max] <- NA
}
}
names(Index) <- name
return(Index)
}
}# end calc.index
data_ind <- rast()
if(!all(bands %in% names(x))){
message <- paste0("Not all bands mentioned in Input match bands available in x. Check your Inputs.\n Available bands: ", paste(names(x), collapse = " "),"\n User Input: ", paste(bands, collapse = " "),"\nCan't calculate Indices.")
if(stop_process){
stop(paste0(message, "\nStopping."))
} else {
warning(message)
}
} else {
# NDVI
terra::add(data_ind) <- calc.index(
"NDVI",
formula = (x[[bands[4]]] - x[[bands[3]]]) / (x[[bands[4]]] + x[[bands[3]]])
)
# NDWI
terra::add(data_ind) <- calc.index(
"NDWI",
formula = (x[[bands[2]]] - x[[bands[4]]]) / (x[[bands[2]]] + x[[bands[4]]])
)
# NDBI
terra::add(data_ind) <- calc.index(
"NDBI",
formula = (x[[bands[5]]] - x[[bands[4]]]) / (x[[bands[5]]] + x[[bands[4]]])
)
# NDBSI
terra::add(data_ind) <- calc.index(
"NDBSI",
formula = ((x[[bands[3]]] + x[[bands[5]]]) - (x[[bands[4]]] + x[[bands[1]]])) / ((x[[bands[3]]] + x[[bands[5]]]) + (x[[bands[4]]] + x[[bands[1]]]))
)
# MSAVI
terra::add(data_ind) <- calc.index(
"MSAVI",
formula = x[[bands[4]]] + ((1 - sqrt((2 * x[[bands[4]]] + 1)^2 - 8 * (x[[bands[4]]] - x[[bands[3]]]))) / 2)
)
}
if(add_to_x){
data_ind <- c(x, data_ind)
}
return(data_ind)
}
for (i in 1:length(unique(dates_o))){
read_rasters <- paste(envrmt$path_raster, dated_rasters[which(unique(dates_o)[i] %in% stringr::str_sub(dated_rasters, datepos[1], datepos[2]))], sep = "/")
for (j in read_rasters){
dr <- terra::project(terra::rast(j), crs)
ifelse(is.null(mask),
dr <- terra::crop(dr, ext),
dr <- terra::mask(dr, mask))
ifelse(j == read_rasters[i],
drs <- dr,
drs <- c(drs, dr))
remove(dr)
} # end reading dated rasters
if(add_spectral_indices & !is.null(bands)){
drs <- addSpectralIndices(x = drs,
bands = bands,
indices = "all",
add_to_x = TRUE,
stop_process = FALSE,
outliers = "cap")
}
terra::time(drs) <- rep(dates[which(!is.na(dates))][i], terra::nlyr(drs))
# save files according to input argument
if(output == "single"){
outname <- paste(unique(dates_o)[i], dateformat, paste0(filename, ".tif"), sep = "__")
terra::writeRaster(drs, file.path(envrmt$path_rworkflow, outname), overwrite = TRUE)
ifelse(i = 1,
outfile <- outname,
outfile[i] <- outname)
}
if(output == "bundle"){
ifelse(i = 1,
outfile <- drs,
terra::add(outfile) <- drs)
}
} # end i loop
# Add Indices to function
addSpectralIndices <- function(x,
bands = c("blue", "green", "red", "nir", "swir"),
indices = "all",
add_to_x = TRUE,
stop_process = TRUE,
outliers = NULL){
# quick function for adding more indexes easy, not for export
calc.index <- function(name, formula, min = -1, max = 1){
if (indices == "all" | name %in% indices){
Index <- formula
if(! all(min < terra::values(Index) & terra::values(Index) < max, na.rm = TRUE)){
message(paste0("Some cell values for the ", name, " lie outside of the expected range."))
if (outliers == "cap"){
NDVI[NDVI < min] <- min
NDVI[NDVI > max] <- max
}
if (outliers == "remove"){
NDVI[NDVI < min] <- NA
NDVI[NDVI > max] <- NA
}
}
names(Index) <- name
return(Index)
}
}# end calc.index
data_ind <- terra::rast()
if(!all(bands %in% names(x))){
message <- paste0("Not all bands mentioned in Input match bands available in x. Check your Inputs.\n Available bands: ", paste(names(x), collapse = " "),"\n User Input: ", paste(bands, collapse = " "),"\nCan't calculate Indices.")
if(stop_process){
stop(paste0(message, "\nStopping."))
} else {
warning(message)
}
} else {
# NDVI
terra::add(data_ind) <- calc.index(
"NDVI",
formula = (x[[bands[4]]] - x[[bands[3]]]) / (x[[bands[4]]] + x[[bands[3]]])
)
# NDWI
terra::add(data_ind) <- calc.index(
"NDWI",
formula = (x[[bands[2]]] - x[[bands[4]]]) / (x[[bands[2]]] + x[[bands[4]]])
)
# NDBI
terra::add(data_ind) <- calc.index(
"NDBI",
formula = (x[[bands[5]]] - x[[bands[4]]]) / (x[[bands[5]]] + x[[bands[4]]])
)
# NDBSI
terra::add(data_ind) <- calc.index(
"NDBSI",
formula = ((x[[bands[3]]] + x[[bands[5]]]) - (x[[bands[4]]] + x[[bands[1]]])) / ((x[[bands[3]]] + x[[bands[5]]]) + (x[[bands[4]]] + x[[bands[1]]]))
)
# MSAVI
terra::add(data_ind) <- calc.index(
"MSAVI",
formula = x[[bands[4]]] + ((1 - sqrt((2 * x[[bands[4]]] + 1)^2 - 8 * (x[[bands[4]]] - x[[bands[3]]]))) / 2)
)
}
if(add_to_x){
data_ind <- c(x, data_ind)
}
return(data_ind)
}
for (i in 1:length(unique(dates_o))){
read_rasters <- paste(envrmt$path_raster, dated_rasters[which(unique(dates_o)[i] %in% stringr::str_sub(dated_rasters, datepos[1], datepos[2]))], sep = "/")
for (j in read_rasters){
dr <- terra::project(terra::rast(j), crs)
ifelse(is.null(mask),
dr <- terra::crop(dr, ext),
dr <- terra::mask(dr, mask))
ifelse(j == read_rasters[i],
drs <- dr,
drs <- c(drs, dr))
remove(dr)
} # end reading dated rasters
if(add_spectral_indices & !is.null(bands)){
drs <- addSpectralIndices(x = drs,
bands = bands,
indices = "all",
add_to_x = TRUE,
stop_process = FALSE,
outliers = "cap")
}
terra::time(drs) <- rep(dates[which(!is.na(dates))][i], terra::nlyr(drs))
# save files according to input argument
if(output == "single"){
outname <- paste(unique(dates_o)[i], dateformat, paste0(filename, ".tif"), sep = "__")
terra::writeRaster(drs, file.path(envrmt$path_rworkflow, outname), overwrite = TRUE)
ifelse(i = 1,
outfile <- outname,
outfile[i] <- outname)
}
if(output == "bundle"){
ifelse(i = 1,
outfile <- drs,
terra::add(outfile) <- drs)
}
} # end i loop
output = "bundle"
for (i in 1:length(unique(dates_o))){
read_rasters <- paste(envrmt$path_raster, dated_rasters[which(unique(dates_o)[i] %in% stringr::str_sub(dated_rasters, datepos[1], datepos[2]))], sep = "/")
for (j in read_rasters){
dr <- terra::project(terra::rast(j), crs)
ifelse(is.null(mask),
dr <- terra::crop(dr, ext),
dr <- terra::mask(dr, mask))
ifelse(j == read_rasters[i],
drs <- dr,
drs <- c(drs, dr))
remove(dr)
} # end reading dated rasters
if(add_spectral_indices & !is.null(bands)){
drs <- addSpectralIndices(x = drs,
bands = bands,
indices = "all",
add_to_x = TRUE,
stop_process = FALSE,
outliers = "cap")
}
terra::time(drs) <- rep(dates[which(!is.na(dates))][i], terra::nlyr(drs))
# save files according to input argument
if(output == "single"){
outname <- paste(unique(dates_o)[i], dateformat, paste0(filename, ".tif"), sep = "__")
terra::writeRaster(drs, file.path(envrmt$path_rworkflow, outname), overwrite = TRUE)
ifelse(i = 1,
outfile <- outname,
outfile[i] <- outname)
}
if(output == "bundle"){
ifelse(i = 1,
outfile <- drs,
terra::add(outfile) <- drs)
}
} # end i loop
for (i in 1:length(unique(dates_o))){
read_rasters <- paste(envrmt$path_raster, dated_rasters[which(unique(dates_o)[i] %in% stringr::str_sub(dated_rasters, datepos[1], datepos[2]))], sep = "/")
for (j in read_rasters){
dr <- terra::project(terra::rast(j), crs)
ifelse(is.null(mask),
dr <- terra::crop(dr, ext),
dr <- terra::mask(dr, mask))
ifelse(j == read_rasters[i],
drs <- dr,
drs <- c(drs, dr))
remove(dr)
} # end reading dated rasters
if(add_spectral_indices & !is.null(bands)){
drs <- addSpectralIndices(x = drs,
bands = bands,
indices = "all",
add_to_x = TRUE,
stop_process = FALSE,
outliers = "cap")
}
terra::time(drs) <- rep(dates[which(!is.na(dates))][i], terra::nlyr(drs))
# save files according to input argument
if(output == "single"){
outname <- paste(unique(dates_o)[i], dateformat, paste0(filename, ".tif"), sep = "__")
terra::writeRaster(drs, file.path(envrmt$path_rworkflow, outname), overwrite = TRUE)
ifelse(i == 1,
outfile <- outname,
outfile[i] <- outname)
}
if(output == "bundle"){
ifelse(i == 1,
outfile <- drs,
terra::add(outfile) <- drs)
}
} # end i loop
names(drs)
if(output == "bundle"){
outname <- paste0(filename, ".tif")
terra::writeRaster(outfile, file.path(envrmt$path_rfinal, outname), overwrite = TRUE)
}
return(outfile)
