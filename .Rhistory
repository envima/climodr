)
#install climodr
devtools::install_github(
"https://github.com/envima/climodr.git",
auth_token = "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"
)
#devtools::load_all() # Solange Github-Repo noch privat
#install climodr
#devtools::install_github(
#  "https://github.com/envima/climodr.git",
#  auth_token = "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"
#  )
devtools::load_all() # Solange Github-Repo noch privat
install.packages(c("cachem", "cli", "digest", "downlit", "fastmap", "pkgdown", "pkgload", "rlang", "roxygen2", "survival", "xts", "yaml"))
install.packages(c("cli", "digest", "fastmap", "rlang"))
library(cli)
detach("package:cli", unload = TRUE)
library(fastmap)
detach("package:fastmap", unload = TRUE)
remove.packages("fastmap")
install.packages("fastmap")
remove.packages("cli")
install.packages("cli")
unlink("vignettes/climodr_vignette_cache", recursive = TRUE)
install.packages("devtools")
devtools::load_all()
#install climodr
devtools::install_github(
"https://github.com/envima/climodr.git",
auth_token = "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"
)
# devtools::load_all() # Solange Github-Repo noch privat
library(climodr)
#install climodr
devtools::install_github(
"https://github.com/envima/climodr.git",
auth_token = "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"
)
# devtools::load_all() # Solange Github-Repo noch privat
tinytex::install_tinytex()
"fertig"
roxygen2::roxygenize()
?autocorr
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
?autocorr
?envi.create
?autocorr
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
?spat.csv
roxygen2::roxygenize()
roxygen2::roxygenize()
?autocorr
library(climodr)
?autocorr
roxygen2::roxygenize()
?autocorr
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
usethis::use_data_raw()
## code to prepare `Vignette` dataset goes here
climodr::envi.create("E:/climodr/vignette")
# Input tabular folder
x <- list.files(envrmt$path_tabular)
n <- stringr::str_sub(x[i], 1, 5)
i = 1
n <- stringr::str_sub(x[i], 1, 5)
noquote(n)
assign(n, read.csv(file.path(envrmt$path_tabular, x[i])))
View(SEG06)
usethis::use_data(n, overwrite = TRUE)
usethis::use_data(noquote(n), overwrite = TRUE)
rlang::last_trace()
noquote(n)
get(n)
usethis::use_data(get(n), overwrite = TRUE)
name(n)
names(n)
usethis::use_data(
assign(
n,
read.csv(
file.path(
envrmt$path_tabular,
x[i]))),
overwrite = TRUE)
environment()
y <- get(n)
unquote(n)
noquote(n)
get(noquote(n))
usethis::use_data(get(noquote(n)), overwrite = TRUE)
library(dplyr)
n
n %>% usethis::use_data(overwrite = TRUE)
rm(y)
get(n) %>% usethis::use_data(overwrite = TRUE)
get(n) %>% usethis::use_data(overwrite = TRUE)
get(n) %>% usethis::use_data(noquote(n), overwrite = TRUE)
noquote(n) %>% usethis::use_data(, overwrite = TRUE)
noquote(n) %>% usethis::use_data(overwrite = TRUE)
eval(parse(usethis::use_data(noquote(n), overwrite = TRUE)))
eval(parse(usethis::use_data(n, overwrite = TRUE)))
eval(parse(usethis::use_data(get(n), overwrite = TRUE)))
eval(usethis::use_data(get(n), overwrite = TRUE))
eval(usethis::use_data(noquote(n), overwrite = TRUE))
usethis::use_data(!!n, overwrite = TRUE)
n_sym <- rlang::sym(n)
usethis::use_data(!!n_sym, overwrite = TRUE)
usethis::use_data(n_sym, overwrite = TRUE)
load("~/GitHub/climodr/data/n_sym.rda")
usethis::use_data(!!n_sym, overwrite = TRUE)
as.name(n)
do.call("usethis::use_data", as.name(n), overwrite = TRUE)
do.call("usethis::use_data", as.name(n))
call("usethis::use_data", as.name(n), overwrite = TRUE)
eval(call("usethis::use_data", as.name(n), overwrite = TRUE))
call("use_data", as.name(n), overwrite = TRUE)
eval(call("use_data", as.name(n), overwrite = TRUE))
library(usethis)
call("use_data", as.name(n), overwrite = TRUE)
eval(call("use_data", as.name(n), overwrite = TRUE))
use_data(as.name(n), overwrite = TRUE)
Sys.getenv()
print(.GlobalEnv)
print(as.vector(.GlobalEnv))
print(as.list(.GlobalEnv))
rm(list = setdiff(ls(), "envrmt"))
# Input vector folder
ext_vignette <- terra::vect(file.path(envrmt$path_vector, "ext_vignette.gpkg"))
usethis::use_data(ext_vignette, overwrite = TRUE)
rm(ext_vignette)
# Input tabular folder
x <- list.files(envrmt$path_tabular)
for (i in 1:length(x)){
n <- stringr::str_sub(x[i], 1, 5)
assign(n, read.csv(file.path(envrmt$path_tabular, x[i])))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
rm(list = setdiff(ls(), "envrmt"))
# Input raster folder
x <- list.files(envrmt$path_raster)
i = 1
n <- gsub(x[i], ".csv$", "")
n <- gsub(x[i], ".tif$", "")
n <- gsub(x = x[i], pattern = ".tif$", replacement = "")
# Input raster folder
x <- list.files(envrmt$path_raster)
for (i in 1:length(x)){
n <- gsub(x = x[i], pattern = ".tif$", replacement = "")
assign(n, terra::rast(file.path(envrmt$path_tabular, x[i])))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
for (i in 1:length(x)){
n <- gsub(x = x[i], pattern = ".tif$", replacement = "")
assign(n, terra::rast(file.path(envrmt$path_raster, x[i])))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
res_area <- terra::rast(file.path(envrmt$path_dep, "res_area.tif"))
# Input dep folder
plot_description <- read.csv(file.path(envrmt$path_dep, "plot_description.csv"))
## code to prepare `Vignette` dataset goes here
climodr::envi.create("E:/climodr/vignette")
library(usethis)
# Input vector folder
ext_vignette <- terra::vect(file.path(envrmt$path_vector, "ext_vignette.gpkg"))
usethis::use_data(ext_vignette, overwrite = TRUE)
rm(ext_vignette)
# Input tabular folder
x <- list.files(envrmt$path_tabular)
for (i in 1:length(x)){
n <- gsub(x = x[i], pattern = ".csv$", replacement = "")
assign(n, read.csv(file.path(envrmt$path_tabular, x[i])))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
rm(list = setdiff(ls(), "envrmt"))
# Input raster folder
x <- list.files(envrmt$path_raster)
for (i in 1:length(x)){
n <- gsub(x = x[i], pattern = ".tif$", replacement = "")
assign(n, terra::rast(file.path(envrmt$path_raster, x[i])))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
rm(list = setdiff(ls(), "envrmt"))
# Input dep folder
plot_description <- read.csv(file.path(envrmt$path_dep, "plot_description.csv"))
res_area <- terra::rast(file.path(envrmt$path_dep, "res_area.tif"))
usethis::use_data(plot_description, overwrite = TRUE)
usethis::use_data(res_area, overwrite = TRUE)
rm(list = setdiff(ls(), "envrmt"))
ext_vignette <- data("ext_vignette")
ext_vignette <- data(ext_vignette)
## code to prepare `Vignette` dataset goes here
climodr::envi.create("E:/climodr/vignette")
library(usethis)
# Input vector folder
ext_vignette <- pack(terra::vect(file.path(envrmt$path_vector, "ext_vignette.gpkg")))
# Input vector folder
ext_vignette <- wrap(terra::vect(file.path(envrmt$path_vector, "ext_vignette.gpkg")))
# Input vector folder
ext_vignette <- wrap(vect(file.path(envrmt$path_vector, "ext_vignette.gpkg")))
library(terra)
# Input vector folder
ext_vignette <- wrap(vect(file.path(envrmt$path_vector, "ext_vignette.gpkg")))
usethis::use_data(ext_vignette, overwrite = TRUE)
rm(ext_vignette)
## code to prepare `Vignette` dataset goes here
climodr::envi.create("E:/climodr/vignette")
library(usethis)
library(terra)
# Input vector folder
ext_vignette <- wrap(vect(file.path(envrmt$path_vector, "ext_vignette.gpkg")))
usethis::use_data(ext_vignette, overwrite = TRUE)
rm(ext_vignette)
# Input tabular folder
x <- list.files(envrmt$path_tabular)
for (i in 1:length(x)){
n <- gsub(x = x[i], pattern = ".csv$", replacement = "")
assign(n, read.csv(file.path(envrmt$path_tabular, x[i])))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
rm(list = setdiff(ls(), "envrmt"))
# Input raster folder
x <- list.files(envrmt$path_raster)
for (i in 1:length(x)){
n <- gsub(x = x[i], pattern = ".tif$", replacement = "")
assign(n, wrap(rast(file.path(envrmt$path_raster, x[i]))))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
rm(list = setdiff(ls(), "envrmt"))
# Input dep folder
plot_description <- read.csv(file.path(envrmt$path_dep, "plot_description.csv"))
res_area <- wrap(rast(file.path(envrmt$path_dep, "res_area.tif")))
usethis::use_data(plot_description, overwrite = TRUE)
usethis::use_data(res_area, overwrite = TRUE)
rm(list = setdiff(ls(), "envrmt"))
library(terra)
x <- rast(file.path(envrmt$path_raster, "sch_201707"))
x <- rast(file.path(envrmt$path_raster, "sch_201707.tif"))
x
x <- aggregate(x, fact = 10)
x
y <- rast(file.path(envrmt$path_raster, "sch_dgm.tif"))
y
y <- aggregate(x, fact = 20)
y
y <- rast(file.path(envrmt$path_raster, "sch_dgm.tif"))
y <- aggregate(y, fact = 20)
y
plot(y)
plot(x)
x <- rast(file.path(envrmt$path_raster, "sch_201707.tif"))
x <- project(x, y)
x
plot(x)
plot(y)
y <- rast(file.path(envrmt$path_raster, "sch_dgm.tif"))
y <- aggregate(y, fact = 20)
y
x <- rast(file.path(envrmt$path_raster, "sch_201707.tif"))
y <- crop(y, x)
plot(y)
x <- project(x, y)
plot(x)
x
writeRaster(y, file.path(envrmt$path_raster, "sch_dgm.tif"), overwrite = TRUE)
writeRaster(x, file.path(envrmt$path_raster, "sch_201707.tif"), overwrite = TRUE)
## code to prepare `Vignette` dataset goes here
climodr::envi.create("E:/climodr/vignette")
library(usethis)
library(terra)
# Input raster folder
x <- list.files(envrmt$path_raster)
for (i in 1:length(x)){
n <- gsub(x = x[i], pattern = ".tif$", replacement = "")
assign(n, wrap(rast(file.path(envrmt$path_raster, x[i]))))
eval(call("use_data", as.name(n), overwrite = TRUE))
}
roxygen2::roxygenise()
library(climodr)
#setting up the environment for climodr
envi.create("E:/climodr/vignette",
memfrac = 0.8)
prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
z <- rast(file.path(envrmt$path_dep, "res_area.tif"))
plot(z)
z
z <- aggregate(z, fact = 2)
plot(z)
z
writeRaster(z, file.path(envrmt$path_dep, "res_area.tif"), overwrite = TRUE)
res_area <- wrap(rast(file.path(envrmt$path_dep, "res_area.tif")))
usethis::use_data(res_area, overwrite = TRUE)
rm(list = setdiff(ls(), "envrmt"))
library(climodr)
#setting up the environment for climodr
envi.create("E:/climodr/vignette",
memfrac = 0.8)
prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
y <- rast(file.path(envrmt$path_raster, "sch_dgm.tif"))
## code to prepare `Vignette` dataset goes here
climodr::envi.create("E:/climodr/vignette")
z <- rast(file.path(envrmt$path_dep, "res_area.tif"))
z
z <- aggregate(z, fact = 5)
z
plot(z)
writeRaster(z, file.path(envrmt$path_dep, "res_area.tif"), overwrite = TRUE)
res_area <- wrap(rast(file.path(envrmt$path_dep, "res_area.tif")))
usethis::use_data(res_area, overwrite = TRUE)
library(climodr)
#setting up the environment for climodr
envi.create("E:/climodr/vignette",
memfrac = 0.8)
prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
safe_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:24),
plot.corrplot = FALSE
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"nnet",
"lm"
),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:24),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = FALSE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif")
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = FALSE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
rm(list = setdiff(ls(), "envrmt"))
all_files_in_distribution <- list.files(path = envrmt$path_raster, recursive = T); #reads all data in Raster Input Folder
tiff_paths <- grep(".tif$", all_files_in_distribution, value = TRUE); # Select tiff-files
number_of_tiffs <- length(tiff_paths);
i = 1
print(paste0("Reading in raster ", i, "/", number_of_tiffs, "."))
tif <- terra::rast(file.path(envrmt$path_raster, tiff_paths[[i]]))
tif
plot(tif)
tif <- terra::project(tif, terra::rast(file.path(envrmt$path_dep, "res_area.tif")), mask = TRUE)
plot(tif)
res_area <- terra::rast(file.path(envrmt$path_dep, "res_area.tif"))
tif <- terra::project(tif, res_area, mask = TRUE)
res_area
terra::plot(res_area)
terra::plot(tif)[1]
terra::plot(tif[1])
terra::plot(tif[[1]])
terra::plot(res_area)
tif <- terra::project(tif, res_area, mask = TRUE)
terra::plot(tif[[1]])
tif <- terra::rast(file.path(envrmt$path_raster, tiff_paths[[i]]))
res_area <- terra::rast(file.path(envrmt$path_dep, "res_area.tif"))
tif <- terra::project(tif, res_area)
terra::plot(tif[[1]])
tif <- terra::crop(tif, res_area)
terra::plot(tif[[1]])
tif <- terra::mask(tif, res_area)
terra::plot(tif[[1]])
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = FALSE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif")
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = FALSE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
data(package = "climodr")
l <- data(package = "climodr")
View(l)
l
remove(l)
# Input dep folder
res_area <- data("res_area", package = "climodr")}
# Input dep folder
res_area <- data("res_area", package = "climodr")
# Input dep folder
res_area <- terra::vect(data("res_area", package = "climodr"))
# Input dep folder
res_area <- terra::vect(data("res_area"))
# Input dep folder
res_area <- terra::vect(data("res_area.rda"))
# Input dep folder
res_area <- terra::vect(data("res_area"))
# Input dep folder
res_area <- (data("res_area"))
# Input dep folder
data("res_area")
force(res_area)
# Input dep folder
terra::unwrap(data("res_area"))
force(res_area)
View(res_area)
# Input dep folder
data("res_area")
terra::unwrap(res_area)
res_area <- terra::unwrap(res_area)
data("res_area")
res_area <- terra::unwrap(res_area)
# Input dep folder
data("res_area")
res_area <- terra::unwrap(res_area)
#install climodr
install.packages("climodr")
library(climodr)
#setting up the environment for climodr
envi.create("E:/climodr/vignette",
memfrac = 0.8)
data("plot_description")
force(plot_description)
