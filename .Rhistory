raster <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = dates[i],
tiff_list,
value = TRUE
)
)
)
terra::add(raster) <- dgm
modname <- paste0(
mnote,
"_",
mod_df[i, ]$sensor,
"_",
dates[i],
"_",
mod_df[i, ]$modeltype,
"_",
mod_df[i, ]$classifier
)
mod <- readRDS(
file.path(
envrmt$path_models,
paste0(modname,
"_ffs_model.rds")
)
)
print(
paste0(
"Making ",
mod_df[i, ]$sensor,
" ",
mod_df[i, ]$classifier,
"-prediction for ",
dates[i],
"."
)
)
pred <- terra::predict(
raster,
mod,
na.rm = TRUE
)
names(pred) <- modname
terra::writeRaster(
pred,
file.path(
envrmt$path_predictions,
paste0(
modname,
"_prediction.tif"
)
),
overwrite = TRUE
)
if (isTRUE(AOA)) try({
oldw <- getOption("warn") # old settings
options(warn = -1) # turn off warnings
aoa <- CAST::aoa(
newdata = raster,
model = mod)
names(aoa) <- paste0(modname, "_aoa")
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
options(warn = oldw) # return old warning settings
})
} # end i loop
# filter for best models
dates <- unique(eval_df[, 1])
# read eval_df
eval_df <- readRDS(
file.path(
envrmt$path_statistics,
paste0(
mnote,
"_mod_eval_df.rds"
)
)
)
mnote = "vignette"
# create a list with all raster images
tiff_list <- list.files(
path = envrmt$path_rfinal,
pattern = ".tif",
recursive = TRUE
)
# read dgm
dgm <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = "_dgm_",
tiff_list,
value = TRUE)
)
)
# read eval_df
eval_df <- readRDS(
file.path(
envrmt$path_statistics,
paste0(
mnote,
"_mod_eval_df.rds"
)
)
)
# filter for best models
dates <- unique(eval_df[, 1])
for (i in 1:length(dates)){
mod_date <- eval_df[which(eval_df[, 1] == dates[i]), ]
ifelse(
i == 1,
mod_df <- mod_date[
which(mod_date$Nrmse == min(mod_date$Nrmse)), ],
mod_df[i, ] <- mod_date[
which(mod_date$Nrmse == min(mod_date$Nrmse)), ]
)
# read fitting raster
raster <- terra::rast(
file.path(
envrmt$path_rfinal,
grep(
pattern = dates[i],
tiff_list,
value = TRUE
)
)
)
terra::add(raster) <- dgm
modname <- paste0(
mnote,
"_",
mod_df[i, ]$sensor,
"_",
dates[i],
"_",
mod_df[i, ]$modeltype,
"_",
mod_df[i, ]$classifier
)
mod <- readRDS(
file.path(
envrmt$path_models,
paste0(modname,
"_ffs_model.rds")
)
)
print(
paste0(
"Making ",
mod_df[i, ]$sensor,
" ",
mod_df[i, ]$classifier,
"-prediction for ",
dates[i],
"."
)
)
pred <- terra::predict(
raster,
mod,
na.rm = TRUE
)
names(pred) <- modname
terra::writeRaster(
pred,
file.path(
envrmt$path_predictions,
paste0(
modname,
"_prediction.tif"
)
),
overwrite = TRUE
)
if (isTRUE(AOA)) try({
oldw <- getOption("warn") # old settings
options(warn = -1) # turn off warnings
aoa <- CAST::aoa(
newdata = raster,
model = mod)
names(aoa) <- paste0(modname, "_aoa")
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
options(warn = oldw) # return old warning settings
})
} # end i loop
oldw <- getOption("warn") # old settings
options(warn = -1) # turn off warnings
aoa <- CAST::aoa(
newdata = raster,
model = mod)
names(aoa) <- paste0(modname, "_aoa")
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
aoa
aoa$AOA
aoa <- CAST::aoa(
newdata = raster,
model = mod)
aoa$AOA
names(aoa$AOA)
names(aoa$AOA) <- paste0(modname, "_aoa")
aoa$AOA
terra::writeRaster(
aoa$AOA,
file.path(
envrmt$path_aoa,
paste0(
modname,
"_aoa.tif"
)
),
overwrite = TRUE
)
options(warn = oldw) # return old warning settings
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif")
head(predlist)
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(overwrite = TRUE)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif")
head(predlist)
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(overwrite = TRUE)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif", recursive = TRUE)
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = TRUE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
ac <- data.frame(ac_code = c(0, 1),
ac_class = c("applicable",
"not applicable"))
mnote = "vignette"
sensor = "Ta_200"
all_preds <- list.files(
envrmt$path_predictions,
pattern = ".tif",
recursive = FALSE)
s = 1
preds <- all_preds[which(grepl(all_preds, pattern = paste0(mnote, "_", sensor[s])))]
print(paste0("Creating maps for sensor [", sensor[s], "]."))
i = 1
filename <- gsub("_prediction.tif.*", "", preds[i])
prediction <- terra::rast(file.path(envrmt$path_predictions, preds[i]))
AOA <- terra::rast(file.path(envrmt$path_aoa, paste0(filename, "_aoa.tif")))
View(ac)
terra::levels(AOA) <- ac
levels(AOA) <- ac
terra::plot(AOA)
terra::plot(AOA,
col = c("", "grey"),
add = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 1),
"grey"),
add = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 1),
"grey"))
mapcolors = rev(heat.colors(50))
scale_position = "bottomleft"
north_position = "topright"
terra::plot(
main = filename,
prediction,
col = mapcolors,
background = "lightgrey",
box = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 1),
"grey"),
legend = "bottomright",
add = TRUE)
terra::plot(
main = filename,
prediction,
col = mapcolors,
background = "lightgrey",
box = TRUE)
terra::plot(AOA,
col = c(adjustcolor("white", alpha.f = 0),
"grey"),
legend = "bottomright",
add = TRUE)
View(csv_fin)
View(prediction)
v <- terra::vect(csv_fin, geom = c("x", "y"), crs = terra::crs(prediction))
terra::plot(v, add = TRUE, legend = FALSE)
library(climodr)
# setting up the environment for climodr
envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(overwrite = TRUE)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(method = "proc", save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(method = "MB_Timeseries", overwrite = TRUE)
calc.indices(vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
predlist <- list.files(envrmt$path_predictions, pattern = ".tif", recursive = TRUE)
head(predlist)
climplot(
mnote = "vignette",
sensor = "Ta_200",
aoa = TRUE,
mapcolors = rev(heat.colors(50)),
scale_position = "bottomleft",
north_position = "topright"
)
