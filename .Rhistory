"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climpred(
method = "monthly",
mnote = "vignette",
AOA = TRUE)
devtools::document()
devtools::document()
?data
?complete.cases
?head
?complete.cases
?daymonth
??daymonth
?data
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
#install climodr
install.packages("climodr")
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
print("Loading example data for the climodr example..")
print(environment())
# Input dep folder
data("res_area", envir = environment())
data("plot_description", envir = environment())
res_area <- terra::unwrap(res_area)
plot_description <- plot_description # to silence R CMD check note
terra::writeRaster(res_area, file.path(envrmt$path_dep, "res_area.tif"), overwrite = TRUE)
write.csv(plot_description, file.path(envrmt$path_dep, "plot_description.csv"))
print(paste0("Saved climodr example dependency files to {", envrmt$path_dep, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Input raster folder
data("sch_201707", envir = environment())
data("sch_dgm", envir = environment())
sch_201707 <- terra::unwrap(sch_201707)
sch_dgm <- terra::unwrap(sch_dgm)
terra::writeRaster(sch_201707, file.path(envrmt$path_raster, "sch_201707.tif"), overwrite = TRUE)
terra::writeRaster(sch_dgm, file.path(envrmt$path_raster, "sch_dgm.tif"), overwrite = TRUE)
print(paste0("Saved climodr example raster files to {", envrmt$path_raster, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Input tabular folder
l <- data(package = "climodr")$results[,3]
l <- l[grepl("Station", l)]
for (i in l){
eval(call("data", i, envir = environment()))
eval(call("write.csv", as.name(i), file.path(envrmt$path_tabular, paste0(i, ".csv")), row.names = FALSE))
}
print(paste0("Saved climodr example tabular files to {", envrmt$path_tabular, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Input vector folder
data("ext_vignette", envir = environment())
ext_vignette <- terra::unwrap(ext_vignette)
terra::writeVector(ext_vignette, file.path(envrmt$path_vector, "ext_vignette.gpkg"), overwrite = TRUE)
print(paste0("Saved climodr example vector files to {", envrmt$path_vector, "}."))
rm(list = setdiff(ls(), "envrmt"))
gc()
# Talk to the User
print("Done loading all the example files. You are ready to continue.")
(envrmt = envrmt
)
roxygen2::roxygenise()
devtools::load_all()
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
# load in all the climodr example data for this vignette
clim.sample(envrmt)
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample()
roxygen2::roxygenise()
usethis::use_cran_comments()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(envrmt = envrmt)
envrmt
# load in all the climodr example data for this vignette
clim.sample(envrmt = envrmt)
message(environment())
environment()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
roxygen2::roxygenise()
package::climodr
?climodr
roxygen2::roxygenise()
area <- terra::vect("E:/climodr/exploratories/hai100/input/vector/exploratorium_hainich.gpkg")
csv_list <- list()
install.packages("installr")
library(installr)
updateR()
install.packages("climodr")
lares::updateLares()
install.packages("devtools")
lares::updateLares()
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(envrmt = envrmt)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(envrmt = envrmt,
method = "proc",
save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(envrmt = envrmt,
method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(envrmt = envrmt,
method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(envrmt = envrmt,
method = "MB_Timeseries",
overwrite = TRUE)
calc.indices(envrmt = envrmt,
vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(envrmt = envrmt,
method = "monthly",
save_output = TRUE)
head(csv_fin)
envrmt = envrmt,
method = "monthly"
resp = 5
pred = c(8:23)
plot.corrplot = TRUE
corrplot = "coef"
#get data from PreProcessing
data_o <- utils::read.csv(
file.path(
envrmt$path_tfinal,
paste0(
"final_",
method,
".csv"
)
)
)
#subset data
data <- data_o[ ,c(resp, pred)]
#duplicated data
#data_d <- data[duplicated(data),];
data <- data[stats::complete.cases(data), ]
c <- stats::cor(data)
### -- smol function from stack overflow for cor-test -- ##
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- stats::cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
};
# matrix of the p-value of the correlation
p.mat <- cor.mtest(data)
round(utils::head(p.mat[, 1:5]), 6)
if (plot.corrplot == TRUE){
col <- grDevices::colorRampPalette(c("#BB4444", "#EE9988", "#fff0db", "#77AADD", "#4477AA"));
if ("coef" %in% corrplot){
corrplot::corrplot(c,
method = "color",
col = col(200),
type = "upper",
order = "hclust",
addCoef.col = "black", # Add coefficient of correlation
tl.col = "black",
tl.srt = 45, #Text label color and rotation
# Combine with significance
p.mat = p.mat,
sig.level = 0.01,
insig = "blank",
# hide correlation coefficient on the principal diagonal
diag = FALSE
)
}
if ("crossout" %in% corrplot){
#with significance
corrplot::corrplot(c,
type="upper",
order="hclust",
p.mat = p.mat,
sig.level = 0.01)
}
if ("blank" %in% corrplot){
# Leave blank on no significant coefficient
corrplot::corrplot(c,
type="upper",
order="hclust",
p.mat = p.mat,
sig.level = 0.01,
insig = "blank")
}
}
# Now with a variable for sensor
corlist <- list()
sensor_names <- names(data)[c(1:length(resp))]
if(length(resp) == 1){
var_name <- sensor_names[1]
var_sym <- rlang::sym(var_name)  # Construct symbol from string
corlist[[1]] <- lares::corr_var(
df = data,
var = !!var_sym,
max_pvalue = 0.05,
top = 50)
} else {
for (i in 1:length(resp)){
var_name <- sensor_names[i]
var_sym <- rlang::sym(var_name)  # Construct symbol from string
corlist[[i]] <- lares::corr_var(
df = data,
var = !!var_sym,
max_pvalue = 0.05,
ignore = names(data)[c(1:length(resp)[-i])],
top = 50
)
}
} # end if-conditions
var_name <- sensor_names[1]
var_sym <- rlang::sym(var_name)  # Construct symbol from string
corlist[[1]] <- lares::corr_var(
df = data,
var = !!var_sym,
max_pvalue = 0.05,
top = 50)
View(corlist)
lares::corr_var()
?lares::corr_var()
View(data)
corlist[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 0.05,
top = 50)
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 0.05,
top = 50)
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 0.1,
top = 50)
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 1,
top = 50)
install.packages("lares")
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 0.05,
top = 50)
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 1,
top = 50)
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 1,
top = 50)
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = 0.05,
top = 50)
View(corlist)
corlist
length(corlist)
corlist[[1]]
length(corlist[[1]])
corlist$variables
corlist$corr
# Now with a variable for sensor
corlist_2 <- list()
corlist_2[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50)
max_pvalue = 0.05
corlist_2[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50)
corlist_2
corlist_2$variables
corlist_2$data
corlist_2$data$variables
corlist_2[[1]]$data$pvalue
corlist_2[[1]]$data
lares::updateLares()
# Now with a variable for sensor
corlist_3 <- list()
corlist_3[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50)
corlist_3[[1]]$data
lares::updateLares()
corlist_3[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50)
corlist_3[[1]]$data
max_pvalue = 1
corlist_3[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50)
corlist_3[[1]]$data
corlist_2[[1]]$data
write.csv(data, file.path("C:/Users/Alexander/Desktop/data.csv"))
lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50,
plot = FALSE)
?lares::corr_cross()
lares::corr_cross(data)
lares::corr_cross(data, contains = "Ta_200")
lares::corr_cross(data, contains = "Ta_200", plot = FALSE)
lares::updateLares()
max_pvalue = 0.05
corlist[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50)
# Now with a variable for sensor
corlist <- list()
corlist[[1]] <- lares::corr_var(
df = data,
var = sensor_names[1],
max_pvalue = max_pvalue,
top = 50)
corlist[[1]]$data
library(climodr)
# setting up the environment for climodr
envrmt <- envi.create(tempdir(),
memfrac = 0.8)
# load in all the climodr example data for this vignette
clim.sample(envrmt = envrmt)
# remove everything in the global environment except of our environment path list
rm(list = setdiff(ls(), "envrmt"))
prep.csv(envrmt = envrmt,
method = "proc",
save_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- proc.csv(envrmt = envrmt,
method = "monthly",
rbind = TRUE,
save_output = TRUE)
head(csv_data)
csv_spat <- spat.csv(envrmt = envrmt,
method = "monthly",
des_file = "plot_description.csv",
save_output = TRUE)
head(csv_spat)
crop.all(envrmt = envrmt,
method = "MB_Timeseries",
overwrite = TRUE)
calc.indices(envrmt = envrmt,
vi = "all",
bands = c("blue", "green", "red",
"nir", "nirb",
"re1", "re2", "re3",
"swir1", "swir2"),
overwrite = TRUE)
csv_fin <- fin.csv(envrmt = envrmt,
method = "monthly",
save_output = TRUE)
head(csv_fin)
autocorr(
envrmt = envrmt,
method = "monthly",
resp = 5,
pred = c(8:23),
plot.corrplot = TRUE,
corrplot = "coef"
)
calc.model(
envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
calc.model(
envrmt = envrmt,
method = "monthly",
timespan = c(2017),
climresp = c(5),
classifier = c(
"rf",
"pls",
"lm"),
seed = 707,
p = 0.8,
folds = "LLO",
mnote = "vignette",
predrows = c(8:23),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
formula(mod_date$Nrmse == min(mod_date$Nrmse))
cite("climodr")
cite("package::climodr")
citation("climodr")
