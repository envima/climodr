tiff_list <- list();
all_files_in_distribution <- list.files(path = file.path(envrmt$path_wraster), recursive = T); #reads all data in Workflow Raster Folder
tiff_paths <- grep(".tif$", all_files_in_distribution, value=TRUE); # Select tiff-files
number_of_tiffs <- length(tiff_paths);
i = 1
tiff_list[[i]] <- terra::rast(file.path(envrmt$path_wraster, tiff_paths[[i]]))
if (i == 1){
tiff_stack <- tiff_list[[i]]
} else {
terra::add(tiff_stack) <- tiff_list[[i]]
}
data$ID <- seq(1:length(data[,1]));
extr <- terra::extract(tiff_stack,
data.frame(x = data$lon,
y = data$lat)
);
data <- merge(data, extr, by = "ID");
data$ID <- NULL;
View(data)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
climodr::envi.create("E:/climodr/vignette")
climodr::prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
data <- terra::rast("E:/climodr/showcase/workflow/wraster/2018_testdata_layer.tif")
data
data <- data[, -c("tpi", "bedrock", "trasp", "texture", "NBR", "NDB", "NDT", "NDS")]
View(data)
data["tpi"]
data("tpi")
data[, "tpi"]
data["tpi", ]
data["ARV", ]
data["ARV"]
data["tpi"]
data <- data[-c("bedrock", "trasp", "texture", "NBR", "NDB", "NDT", "NDS")]
data <- data[-c(trasp", "texture", "NBR", "NDB", "NDT", "NDS")]
data <- data[-c("trasp", "texture", "NBR", "NDB", "NDT", "NDS")]
data <- data[-c("texture", "NBR", "NDB", "NDT", "NDS")]
data <- data[-c("NBR", "NDB", "NDT", "NDS")]
data <- data[, -c("NBR", "NDB", "NDT", "NDS")]
data <- data[-"NBR"]
names(data)
n <- names(data)
n <- n - c("tpi", "bedrock", "trasp", "texture", "NBR", "NDB", "NDT", "NDS")
n <- n[-c("tpi", "bedrock", "trasp", "texture", "NBR", "NDB", "NDT", "NDS")]
n <- c(n, -c("tpi", "bedrock", "trasp", "texture", "NBR", "NDB", "NDT", "NDS"))
is.vector(n)
devtools::load_all()
### Initiate Climodr ###
climodr::envi.create("E:/climodr/showcase")
### Initiate Climodr ###
climodr::envi.create("E:/climodr/showcase")
csv_list <- list()
Input <- envrmt$path_tabular
all_files_in_distribution <- list.files(path = Input, recursive = T); #reads all data in Input-Folder
csv_paths <- grep(".csv$", all_files_in_distribution, value=TRUE);
number_of_csvs <- length(csv_paths);
i = 1
csv_data <- read.csv(file.path(Input, paste0(csv_paths[[i]])), sep = ",")
View(csv_data)
csv_data[,1]
View(csv_data)
csv_data <- csv_data[,c(1:3,6,9:10)]
View(csv_data)
for (i in 1:number_of_csvs){
csv_data <- read.csv(file.path(Input, paste0(csv_paths[[i]])), sep = ",")
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
csv_data <- csv_data[,c(1:3,6,9:10)]
write.csv(csv_data, file.path("E:/climodr/vignette/input/tabular", paste0(csv_data[[1,1]], ".csv")), row.names = FALSE)
};
for (i in 1:number_of_csvs){
csv_data <- read.csv(file.path(Input, paste0(csv_paths[[i]])), sep = ",")
cn_data <- colnames(csv_data)
number_of_cn <- length(cn_data)
csv_data <- csv_data[,c(1:3,6,9:10)]
write.csv(csv_data, file.path("E:/climodr/vignette/input/tabular", paste0("2018_", csv_data[[1,1]], ".csv")), row.names = FALSE)
};
climodr::envi.create("E:/climodr/vignette")
x <- terra::rast(envrmt$path_wraster, "2018_vignette_layer.tif")
x <- terra::rast(file.path(envrmt$path_wraster, "2018_vignette_layer.tif"))
View(x)
n <- names(x)
n
nn <- n - c("NBR", "NDB", "NDT", "NDS")
nn <- n - c(14, 17, 19, 20)
nn <- n[-c(14, 17, 19, 20)]
nn
nn <- n[-c("NBR", "NDB", "NDT", "NDS")]
xn <- terra:subset(x, nn)
xn <- terra::subset(x, nn)
View(xn)
View(x)
terra::writeRaster(xn,
file.path(envrmt$path_wraster, "2018_vignette_layer.tif"),
overwrite = TRUE)
terra::writeRaster(xn,
file.path(envrmt$path_wraster, "2018_vignette_layer_2.tif"),
overwrite = TRUE)
d <- terra::rast(file.path(envrmt$path_wraster, "dem_vignette.tif"))
n <- names(d)
nn <- n[-c(4, 5)]
dn <- terra::subset(d, nn)
terra::writeRaster(dn,
file.path(envrmt$path_wraster, "dem_vignette_2.tif"),
overwrite = TRUE)
eval_vector <- c(6, 9, 12, 15, 16:28, 30, 31, 33, 34, 37:52, 54, 55)
# -c(29(NBR), 32(NDB), 35(NDT), 36(NDS), -53(tpi))
climodr::autocorr(eval_vector)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
climodr::envi.create("E:/climodr/vignette")
climodr::prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
climodr::prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
climodr::prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
climodr::prep.csv(method = "proc", safe_output = TRUE)
#check the created csv files
csv_files <- grep("_no_NAs.csv$",
list.files(envrmt$path_tworkflow),
value=TRUE)
csv_files
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
csv_fin <- climodr::fin.csv(method = "monthly",
safe_output = TRUE)
head(csv_fin)
method = "monthly"
#' Otherwise the output will be safed in the temporary directory. Default: FALSE.
#'
#' @return List
#' @seealso
#'
#' @name final.csv
#' @export final.csv
#'
#' @examples
#'
fin.csv <- function(method = "monthly",
crs = NULL,
safe_output = TRUE,
...){
if (method == "monthly"){
data <- read.csv(file.path(envrmt$path_tworkflow, "spat_monthly_means.csv"));
};
tiff_list <- list();
all_files_in_distribution <- list.files(path = file.path(envrmt$path_wraster), recursive = T); #reads all data in Workflow Raster Folder
tiff_paths <- grep(".tif$", all_files_in_distribution, value=TRUE); # Select tiff-files
number_of_tiffs <- length(tiff_paths);
for (i in 1:number_of_tiffs){
tiff_list[[i]] <- terra::rast(file.path(envrmt$path_wraster, tiff_paths[[i]]))
if (i == 1){
tiff_stack <- tiff_list[[i]]
} else {
terra::add(tiff_stack) <- tiff_list[[i]]
}
};
data$ID <- seq(1:length(data[,1]));
extr <- terra::extract(tiff_stack,
data.frame(x = data$lon,
y = data$lat)
);
data <- merge(data, extr, by = "ID");
data$ID <- NULL;
data <- tidyr::drop_na(data)
write.csv(data, file.path(envrmt$path_tfinal, "final_monthly.csv"), row.names = FALSE);
return(data)
}
crs = NULL
if (method == "monthly"){
data <- read.csv(file.path(envrmt$path_tworkflow, "spat_monthly_means.csv"));
};
tiff_list <- list();
all_files_in_distribution <- list.files(path = file.path(envrmt$path_wraster), recursive = T); #reads all data in Workflow Raster Folder
tiff_paths <- grep(".tif$", all_files_in_distribution, value=TRUE); # Select tiff-files
number_of_tiffs <- length(tiff_paths);
for (i in 1:number_of_tiffs){
tiff_list[[i]] <- terra::rast(file.path(envrmt$path_wraster, tiff_paths[[i]]))
if (i == 1){
tiff_stack <- tiff_list[[i]]
} else {
terra::add(tiff_stack) <- tiff_list[[i]]
}
};
data$ID <- seq(1:length(data[,1]));
extr <- terra::extract(tiff_stack,
data.frame(x = data$lon,
y = data$lat)
);
data <- merge(data, extr, by = "ID");
data$ID <- NULL;
View(data)
data_n <- tidyr::drop_na(data)
View(data_n)
which(is.na(data))
View(extr)
View(data)
data$datetime <- NULL;
View(data)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
#setting up the environment for climodr
climodr::envi.create("E:/climodr/vignette")
csv_data <- climodr::proc.csv(method = "all",
rbind = TRUE,
safe_output = TRUE)
head(csv_data)
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
method = "monthly"
des_file = "plot_description.csv"
if (method == "monthly"){
data <- read.csv(file.path(envrmt$path_tworkflow, "all_monthly_means.csv"));
cn_data <- colnames(data)
names_of_stations <- as.vector(unlist(unique(data[1])))
number_of_stations <- length(names_of_stations)
}
des <- read.csv(file.path(envrmt$path_dep, des_file));
data$lat <- "";
data$lon <- "";
for (i in 1:number_of_stations){
data$lat[which(data$plot == names_of_stations[i])] <- des$lat[which(grepl(names_of_stations[i], des$plot))]
data$lon[which(data$plot == names_of_stations[i])] <- des$lon[which(grepl(names_of_stations[i], des$plot))]
};
View(data)
mms <- 4:(2 + length(cn_data));
View(data)
mms <- 4:(length(cn_data) - 2);
mms <- 4:length(cn_data);
View(data)
(3 + length(monthly_means)):length(names(data))]
(3 + length(monthly_means)):length(names(data))
monthly_means <- 4:length(cn_data);
(3 + length(monthly_means)):length(names(data))
(4 + length(monthly_means)):length(names(data))
names(data)  <- c(names(data[1:3]),
gsub("monthly_mean_", "", names(data[monthly_means])),
names(data[(4 + length(monthly_means)):length(names(data))])
);
data
if (is.null(crs)){
crs <- terra::crs(terra::rast(file.path(envrmt$path_dep, "res_area.tif")))
}
data$lat <- as.numeric(data$lat)
data$lon <- as.numeric(data$lon)
sp::coordinates(data) <- ~ lon + lat
sp::proj4string(data) <- sp::CRS("+proj=longlat +datum=WGS84")
data <- sp::spTransform(data, crs)
crs <- terra::crs(terra::rast(file.path(envrmt$path_dep, "res_area.tif")))
data$lat <- as.numeric(data$lat)
data$lon <- as.numeric(data$lon)
sp::coordinates(data) <- ~ lon + lat
sp::proj4string(data) <- sp::CRS("+proj=longlat +datum=WGS84")
data <- sp::spTransform(data, crs)
n <- names(data)
data <- data.frame(data)
data$optional <- NULL
data <- data[, c(n, "lat", "lon")]
View(data)
write.csv(data, file.path(envrmt$path_tworkflow, "spat_monthly_means.csv"), row.names = FALSE);
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
csv_spat <- climodr::spat.csv(method = "monthly",
des_file = "plot_description.csv",
safe_output = TRUE)
head(csv_spat)
csv_fin <- climodr::fin.csv(method = "monthly",
safe_output = TRUE)
head(csv_fin)
View(csv_fin)
eval_vector <- c(4:43)
climodr::autocorr(eval_vector)
climodr::calc.model(timespan = c(2018),
climresp = c(6 ,9 ,12, 15),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(16:55),
tc_method = "cv",
metric = "RMSE",
autocorrelation = FALSE,
doParallel = FALSE)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = FALSE,
doParallel = FALSE)
timespan = c(2018)
#setting up the environment for climodr
climodr::envi.create("E:/climodr/vignette")
timespan = c(2018)
climresp = c(4:7)
classifier = c("rf", "pls", "nnet" , "lm"),
classifier = c("rf", "pls", "nnet" , "lm")
seed = 707
p = 0.8
fold = "LLO"
mnote = "normal"
predrows = c(8:43)
tc_method = "cv"
metric = "RMSE"
autocorrelation = FALSE
doParallel = FALSE
data_o <- read.csv(file.path(envrmt$path_tfinal, "final_monthly.csv"));
df_total <- data.frame();
data_y <- data_o[c(which(data_o$year == y)), ]
y = 2018
data_y <- data_o[c(which(data_o$year == y)), ]
data <- data_y[complete.cases(data_y), ]
time <- y
print("Training models for year ", time)
print("Training models for year ", as.character(time))
time
time[1]
as.character(time)
print(paste("Training models for year ", time))
print(paste("Training models for year", time))
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = FALSE,
doParallel = FALSE)
library::dplyr
library(dplyr)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = FALSE,
doParallel = FALSE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = FALSE,
doParallel = FALSE)
climresp(1)
climresp[1]
climresp[2]
data_o <- read.csv(file.path(envrmt$path_tfinal, "final_monthly.csv"));
df_total <- data.frame();
print(paste("Training models for year", time))
s = 4
set.seed(seed)
if (s == climresp[1]){
delect <- read.csv(file.path(envrmt$path_statistics, "tem_delect.csv"))
}
View(delect)
if (!(length(delect$variables) == 0)){
data <- data %>% select(-c(delect$variables))
}
partition_indexes <- caret::createDataPartition(data$plot,
times = 1,
p = p,
list = FALSE)
trainingDat <- data[partition_indexes, ]
testingDat <- data[-partition_indexes, ]
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = FALSE,
doParallel = FALSE)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
#install climodr
#devtools::install_github("envima/climodr")
devtools::load_all()
library(climodr)
climodr::calc.model(timespan = c(2018),
climresp = c(4:7),
classifier = c("rf", "pls", "nnet" , "lm"),
seed = 707,
p = 0.8,
fold = "LLO",
mnote = "normal",
predrows = c(8:43),
tc_method = "cv",
metric = "RMSE",
autocorrelation = TRUE,
doParallel = FALSE)
View(data)
